$ this model is used for the SNS solver, as partition is not supported by SNS

given n_boats, n_periods : int(1..)

letting Boat be domain int(1..n_boats)

given capacity, crew : function (total) Boat --> int(1..)

find hosts : set of Boat,
     sched : set (size n_periods) of function (total) Boat --> Boat

find optVar : int(0..n_boats)

minimising optVar

such that
    forAll p in sched . range(p) = hosts,

    $ implied, stronger condition due to the 1st constraint
    $ original: forAll p in sched . forAll h in hosts . p(h) = h,
    forAll p in sched . forAll h : Boat . h in hosts <-> p(h) = h,

    forAll p in sched . forAll h in hosts . (sum b in preImage(p,h) . crew(b))
                                            <= capacity(h),

    forAll b1,b2 : Boat . b1 < b2 ->
        (sum p in sched . toInt(p(b1) = p(b2))) <= 1,

    optVar = |hosts|
