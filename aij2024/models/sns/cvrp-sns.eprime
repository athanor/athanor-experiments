language ESSENCE' 1.0

given numberLocations: int(1..)
given fin1: int
given fin2: int
given orderWeights_Function1D: matrix indexed by [int(1..numberLocations)] of int(1..fin2)
given fin3: int
given fin4: int
given costs_FunctionND: matrix indexed by [int(0..numberLocations), int(0..numberLocations)] of int(0..fin4)
given vehicleCapacity: int(1..)
letting totalOrderWeight be sum([orderWeights_Function1D[q401] | q401 : int(1..numberLocations)])
letting minVehicles be totalOrderWeight / vehicleCapacity + toInt(totalOrderWeight % vehicleCapacity != 0)
find plan_ExplicitVarSizeWithMarkerR14_Marker: int(0..numberLocations)
find incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker: int(0..numberLocations)
find plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length:
        matrix indexed by [int(1..numberLocations)] of int(0..numberLocations)
find incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length:
        matrix indexed by [int(1..numberLocations)] of int(0..numberLocations)
find plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values:
        matrix indexed by [int(1..numberLocations), int(1..numberLocations)] of int(1..numberLocations)
find incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values:
        matrix indexed by [int(1..numberLocations), int(1..numberLocations)] of int(1..numberLocations)
SNSGroup plan_neighbourhoodGroup :
    [plan_ExplicitVarSizeWithMarkerR14_Marker, plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length,
     plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values]
find plan_setAddSingle_conjure_aux38: int(1..numberLocations)
find plan_setAddSingle_conjure_aux39: int(1..numberLocations)
find plan_setAddSingle_conjure_aux40: int(1..numberLocations)
find plan_setAddSingle_activation: bool
find plan_setAddSingle_size: int(1..numberLocations)
SNSNeighbourhood plan_setAddSingle :
    (plan_setAddSingle_size, plan_setAddSingle_activation, plan_neighbourhoodGroup,
     [plan_setAddSingle_conjure_aux38, plan_setAddSingle_conjure_aux39, plan_setAddSingle_conjure_aux40])
find plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41: int(1..numberLocations)
find plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42: int(1..numberLocations)
find plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux43: int(1..numberLocations)
find plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux44: int(1..numberLocations)
find plan_setLiftMultiple_sequenceCrossOverAny_activation: bool
find plan_setLiftMultiple_sequenceCrossOverAny_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftMultiple_sequenceCrossOverAny :
    (plan_setLiftMultiple_sequenceCrossOverAny_size, plan_setLiftMultiple_sequenceCrossOverAny_activation,
     plan_neighbourhoodGroup,
     [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41, plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42,
      plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux43, plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux44])
find plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux8: int(1..numberLocations)
find plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux9: int(1..numberLocations)
find plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45: int(1..numberLocations)
find plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46: int(1..numberLocations)
find plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux47: int(1..numberLocations)
find plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux48: int(1..numberLocations)
find plan_setLiftMultiple_sequenceCrossOverSub_activation: bool
find plan_setLiftMultiple_sequenceCrossOverSub_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftMultiple_sequenceCrossOverSub :
    (plan_setLiftMultiple_sequenceCrossOverSub_size, plan_setLiftMultiple_sequenceCrossOverSub_activation,
     plan_neighbourhoodGroup,
     [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux8, plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux9,
      plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45, plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46,
      plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux47, plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux48])
find plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux49: int(1..numberLocations)
find plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50: int(1..numberLocations)
find plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51: int(1..numberLocations)
find plan_setLiftMultiple_sequenceMergeLeftOrRight_activation: bool
find plan_setLiftMultiple_sequenceMergeLeftOrRight_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftMultiple_sequenceMergeLeftOrRight :
    (plan_setLiftMultiple_sequenceMergeLeftOrRight_size, plan_setLiftMultiple_sequenceMergeLeftOrRight_activation,
     plan_neighbourhoodGroup,
     [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux49,
      plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50,
      plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51])
find plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52: int(1..numberLocations)
find plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53: int(1..numberLocations)
find plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux54: int(1..numberLocations)
find plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55: int(1..numberLocations)
find plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_activation: bool
find plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight :
    (plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_size,
     plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_activation, plan_neighbourhoodGroup,
     [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52,
      plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53,
      plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux54,
      plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55])
find plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56: int(1..numberLocations)
find plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57: int(1..numberLocations)
find plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58: int(1..numberLocations)
find plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59: int(1..numberLocations)
find plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_activation: bool
find plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight :
    (plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_size,
     plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_activation, plan_neighbourhoodGroup,
     [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56,
      plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57,
      plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58,
      plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59])
find plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60: int(1..numberLocations)
find plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61: int(1..numberLocations)
find plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux62: int(1..numberLocations)
find plan_setLiftMultiple_sequenceSplitLeftOrRight_activation: bool
find plan_setLiftMultiple_sequenceSplitLeftOrRight_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftMultiple_sequenceSplitLeftOrRight :
    (plan_setLiftMultiple_sequenceSplitLeftOrRight_size, plan_setLiftMultiple_sequenceSplitLeftOrRight_activation,
     plan_neighbourhoodGroup,
     [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60,
      plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61,
      plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux62])
find plan_setLiftSingle_sequenceAddLeft_conjure_aux63: int(1..numberLocations)
find plan_setLiftSingle_sequenceAddLeft_conjure_aux64: int(1..numberLocations)
find plan_setLiftSingle_sequenceAddLeft_activation: bool
find plan_setLiftSingle_sequenceAddLeft_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftSingle_sequenceAddLeft :
    (plan_setLiftSingle_sequenceAddLeft_size, plan_setLiftSingle_sequenceAddLeft_activation, plan_neighbourhoodGroup,
     [plan_setLiftSingle_sequenceAddLeft_conjure_aux63, plan_setLiftSingle_sequenceAddLeft_conjure_aux64])
find plan_setLiftSingle_sequenceAddRight_conjure_aux65: int(1..numberLocations)
find plan_setLiftSingle_sequenceAddRight_conjure_aux66: int(1..numberLocations)
find plan_setLiftSingle_sequenceAddRight_activation: bool
find plan_setLiftSingle_sequenceAddRight_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftSingle_sequenceAddRight :
    (plan_setLiftSingle_sequenceAddRight_size, plan_setLiftSingle_sequenceAddRight_activation, plan_neighbourhoodGroup,
     [plan_setLiftSingle_sequenceAddRight_conjure_aux65, plan_setLiftSingle_sequenceAddRight_conjure_aux66])
find plan_setLiftSingle_sequenceAnySwap_conjure_aux67: int(1..numberLocations)
find plan_setLiftSingle_sequenceAnySwap_conjure_aux68: int(1..numberLocations)
find plan_setLiftSingle_sequenceAnySwap_activation: bool
find plan_setLiftSingle_sequenceAnySwap_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftSingle_sequenceAnySwap :
    (plan_setLiftSingle_sequenceAnySwap_size, plan_setLiftSingle_sequenceAnySwap_activation, plan_neighbourhoodGroup,
     [plan_setLiftSingle_sequenceAnySwap_conjure_aux67, plan_setLiftSingle_sequenceAnySwap_conjure_aux68])
find plan_setLiftSingle_sequenceRelaxSub_conjure_aux5: int(1..numberLocations)
find plan_setLiftSingle_sequenceRelaxSub_conjure_aux6: int(1..numberLocations)
find plan_setLiftSingle_sequenceRelaxSub_conjure_aux7: int(1..numberLocations)
find plan_setLiftSingle_sequenceRelaxSub_conjure_aux69: int(1..numberLocations)
find plan_setLiftSingle_sequenceRelaxSub_conjure_aux70: int(1..numberLocations)
find plan_setLiftSingle_sequenceRelaxSub_activation: bool
find plan_setLiftSingle_sequenceRelaxSub_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftSingle_sequenceRelaxSub :
    (plan_setLiftSingle_sequenceRelaxSub_size, plan_setLiftSingle_sequenceRelaxSub_activation, plan_neighbourhoodGroup,
     [plan_setLiftSingle_sequenceRelaxSub_conjure_aux5, plan_setLiftSingle_sequenceRelaxSub_conjure_aux6,
      plan_setLiftSingle_sequenceRelaxSub_conjure_aux7, plan_setLiftSingle_sequenceRelaxSub_conjure_aux69,
      plan_setLiftSingle_sequenceRelaxSub_conjure_aux70])
find plan_setLiftSingle_sequenceRemoveLeft_conjure_aux71: int(1..numberLocations)
find plan_setLiftSingle_sequenceRemoveLeft_conjure_aux72: int(1..numberLocations)
find plan_setLiftSingle_sequenceRemoveLeft_activation: bool
find plan_setLiftSingle_sequenceRemoveLeft_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftSingle_sequenceRemoveLeft :
    (plan_setLiftSingle_sequenceRemoveLeft_size, plan_setLiftSingle_sequenceRemoveLeft_activation,
     plan_neighbourhoodGroup,
     [plan_setLiftSingle_sequenceRemoveLeft_conjure_aux71, plan_setLiftSingle_sequenceRemoveLeft_conjure_aux72])
find plan_setLiftSingle_sequenceRemoveRight_conjure_aux73: int(1..numberLocations)
find plan_setLiftSingle_sequenceRemoveRight_conjure_aux74: int(1..numberLocations)
find plan_setLiftSingle_sequenceRemoveRight_activation: bool
find plan_setLiftSingle_sequenceRemoveRight_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftSingle_sequenceRemoveRight :
    (plan_setLiftSingle_sequenceRemoveRight_size, plan_setLiftSingle_sequenceRemoveRight_activation,
     plan_neighbourhoodGroup,
     [plan_setLiftSingle_sequenceRemoveRight_conjure_aux73, plan_setLiftSingle_sequenceRemoveRight_conjure_aux74])
find plan_setLiftSingle_sequenceReverseSub_conjure_aux3: int(1..numberLocations)
find plan_setLiftSingle_sequenceReverseSub_conjure_aux4: int(1..numberLocations)
find plan_setLiftSingle_sequenceReverseSub_conjure_aux75: int(1..numberLocations)
find plan_setLiftSingle_sequenceReverseSub_conjure_aux76: int(1..numberLocations)
find plan_setLiftSingle_sequenceReverseSub_activation: bool
find plan_setLiftSingle_sequenceReverseSub_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftSingle_sequenceReverseSub :
    (plan_setLiftSingle_sequenceReverseSub_size, plan_setLiftSingle_sequenceReverseSub_activation,
     plan_neighbourhoodGroup,
     [plan_setLiftSingle_sequenceReverseSub_conjure_aux3, plan_setLiftSingle_sequenceReverseSub_conjure_aux4,
      plan_setLiftSingle_sequenceReverseSub_conjure_aux75, plan_setLiftSingle_sequenceReverseSub_conjure_aux76])
find plan_setLiftSingle_sequenceRotateLeft_conjure_aux77: int(1..numberLocations)
find plan_setLiftSingle_sequenceRotateLeft_conjure_aux78: int(1..numberLocations)
find plan_setLiftSingle_sequenceRotateLeft_activation: bool
find plan_setLiftSingle_sequenceRotateLeft_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftSingle_sequenceRotateLeft :
    (plan_setLiftSingle_sequenceRotateLeft_size, plan_setLiftSingle_sequenceRotateLeft_activation,
     plan_neighbourhoodGroup,
     [plan_setLiftSingle_sequenceRotateLeft_conjure_aux77, plan_setLiftSingle_sequenceRotateLeft_conjure_aux78])
find plan_setLiftSingle_sequenceRotateRight_conjure_aux79: int(1..numberLocations)
find plan_setLiftSingle_sequenceRotateRight_conjure_aux80: int(1..numberLocations)
find plan_setLiftSingle_sequenceRotateRight_activation: bool
find plan_setLiftSingle_sequenceRotateRight_size: int(1..numberLocations)
SNSNeighbourhood plan_setLiftSingle_sequenceRotateRight :
    (plan_setLiftSingle_sequenceRotateRight_size, plan_setLiftSingle_sequenceRotateRight_activation,
     plan_neighbourhoodGroup,
     [plan_setLiftSingle_sequenceRotateRight_conjure_aux79, plan_setLiftSingle_sequenceRotateRight_conjure_aux80])
find plan_setRemoveSingle_conjure_aux81: int(1..numberLocations)
find plan_setRemoveSingle_conjure_aux82: int(1..numberLocations)
find plan_setRemoveSingle_conjure_aux83: int(1..numberLocations)
find plan_setRemoveSingle_activation: bool
find plan_setRemoveSingle_size: int(1..numberLocations)
SNSNeighbourhood plan_setRemoveSingle :
    (plan_setRemoveSingle_size, plan_setRemoveSingle_activation, plan_neighbourhoodGroup,
     [plan_setRemoveSingle_conjure_aux81, plan_setRemoveSingle_conjure_aux82, plan_setRemoveSingle_conjure_aux83])
SNSIncumbentMapping([plan_ExplicitVarSizeWithMarkerR14_Marker,
                     plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values,
                     plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length],
                    [incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
                     incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values,
                     incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length])
minimising
    sum([toInt(q30 <= plan_ExplicitVarSizeWithMarkerR14_Marker) *
         catchUndef(sum([toInt(i <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q30]) *
                         catchUndef(costs_FunctionND
                                        [plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q30, i - 1],
                                         plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q30, i]],
                                    0)
                             | i : int(2..numberLocations)])
                    + costs_FunctionND[0, plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q30, 1]]
                    +
                    costs_FunctionND
                        [plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                             [q30, plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q30]],
                         0],
                    0)
             | q30 : int(1..numberLocations)])
such that
    and([q30 <= plan_ExplicitVarSizeWithMarkerR14_Marker ->
         and([i <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q30] ->
              i - 1 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q30]
                  | i : int(2..numberLocations)])
             | q30 : int(1..numberLocations)]),
    and([q30 <= plan_ExplicitVarSizeWithMarkerR14_Marker ->
         and([i <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q30] ->
              i <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q30]
                  | i : int(2..numberLocations)])
             | q30 : int(1..numberLocations)]),
    and([q30 <= plan_ExplicitVarSizeWithMarkerR14_Marker ->
         1 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q30]
             | q30 : int(1..numberLocations)]),
    and([q30 <= plan_ExplicitVarSizeWithMarkerR14_Marker ->
         plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q30] <=
         plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q30]
             | q30 : int(1..numberLocations)]),
    and([q31 <= plan_ExplicitVarSizeWithMarkerR14_Marker ->
         sum([toInt(q33 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q31]) *
              catchUndef(orderWeights_Function1D
                             [plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q31, q33]],
                         0)
                  | q33 : int(1..numberLocations)])
         <= vehicleCapacity
             | q31 : int(1..numberLocations)]),
    alldifferent_except([toInt(q36 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q34] /\
                               q34 <= plan_ExplicitVarSizeWithMarkerR14_Marker)
                         * catchUndef(plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q34, q36], 0)
                             | q34 : int(1..numberLocations), q36 : int(1..numberLocations)],
                        0),
    sum([toInt(q37 <= plan_ExplicitVarSizeWithMarkerR14_Marker) *
         catchUndef(plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q37], 0)
             | q37 : int(1..numberLocations)])
    = numberLocations,
    plan_setAddSingle_activation -> allDiff([plan_setAddSingle_conjure_aux38; int(1)]),
    plan_setAddSingle_activation ->
    plan_setAddSingle_conjure_aux38 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setAddSingle_activation ->
    allDiff([plan_setAddSingle_conjure_aux39, plan_setAddSingle_conjure_aux40; int(1..2)]),
    plan_setAddSingle_activation ->
    plan_setAddSingle_conjure_aux39 <= plan_ExplicitVarSizeWithMarkerR14_Marker /\
    plan_setAddSingle_conjure_aux40 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setAddSingle_activation ->
    and([q38 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\ !(q38 = plan_setAddSingle_conjure_aux38) ->
         and([q44 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q38] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q38, q44] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q38, q44]
              /\ q44 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q38]
                  | q44 : int(1..numberLocations)])
         /\
         and([q45 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q38] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q38, q45] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q38, q45]
              /\ q45 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q38]
                  | q45 : int(1..numberLocations)])
         /\
         (and([q47 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q38] ->
               or([q49 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q38] /\ q49 = q47
                       | q49 : int(1..numberLocations)])
                   | q47 : int(1..numberLocations)])
          /\
          and([q51 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q38] ->
               or([q53 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q38] /\ q53 = q51
                       | q53 : int(1..numberLocations)])
                   | q51 : int(1..numberLocations)]))
             | q38 : int(1..numberLocations)]),
    plan_setAddSingle_activation ->
    and([q55 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setAddSingle_conjure_aux39] ->
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[plan_setAddSingle_conjure_aux38, q55]
         = plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[plan_setAddSingle_conjure_aux39, q55]
         /\
         q55 <=
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setAddSingle_conjure_aux38]
             | q55 : int(1..numberLocations)])
    /\
    and([q56 <=
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setAddSingle_conjure_aux38]
         ->
         plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[plan_setAddSingle_conjure_aux39, q56] =
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[plan_setAddSingle_conjure_aux38, q56]
         /\ q56 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setAddSingle_conjure_aux39]
             | q56 : int(1..numberLocations)])
    /\
    (and([q58 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setAddSingle_conjure_aux39] ->
          or([q60 <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setAddSingle_conjure_aux38]
              /\ q60 = q58
                  | q60 : int(1..numberLocations)])
              | q58 : int(1..numberLocations)])
     /\
     and([q62 <=
          incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setAddSingle_conjure_aux38]
          ->
          or([q64 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setAddSingle_conjure_aux39] /\
              q64 = q62
                  | q64 : int(1..numberLocations)])
              | q62 : int(1..numberLocations)]))
    /\
    plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setAddSingle_conjure_aux40] =
    plan_setAddSingle_size,
    plan_setAddSingle_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker + 1,
    plan_setAddSingle_activation ->
    plan_setAddSingle_conjure_aux39 = plan_setAddSingle_conjure_aux38 \/
    plan_setAddSingle_conjure_aux40 = plan_setAddSingle_conjure_aux38,
    plan_setAddSingle_activation -> true,
    !plan_setAddSingle_activation ->
    and([plan_setAddSingle_size = 1, plan_setAddSingle_conjure_aux38 = 1, plan_setAddSingle_conjure_aux39 = 1,
         plan_setAddSingle_conjure_aux40 = 1;
             int(1..4)]),
    plan_setLiftMultiple_sequenceCrossOverAny_activation ->
    allDiff([plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41,
             plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42;
                 int(1..2)]),
    plan_setLiftMultiple_sequenceCrossOverAny_activation ->
    plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
    plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceCrossOverAny_activation ->
    allDiff([plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux43,
             plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux44;
                 int(1..2)]),
    plan_setLiftMultiple_sequenceCrossOverAny_activation ->
    plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux43 <= plan_ExplicitVarSizeWithMarkerR14_Marker /\
    plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux44 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceCrossOverAny_activation ->
    and([q65 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q65 = plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41 \/
           q65 = plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42)
         ->
         and([q79 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q65] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q65, q79] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q65, q79]
              /\ q79 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q65]
                  | q79 : int(1..numberLocations)])
         /\
         and([q80 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q65] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q65, q80] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q65, q80]
              /\ q80 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q65]
                  | q80 : int(1..numberLocations)])
         /\
         (and([q82 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q65] ->
               or([q84 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q65] /\ q84 = q82
                       | q84 : int(1..numberLocations)])
                   | q82 : int(1..numberLocations)])
          /\
          and([q86 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q65] ->
               or([q88 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q65] /\ q88 = q86
                       | q88 : int(1..numberLocations)])
                   | q86 : int(1..numberLocations)]))
             | q65 : int(1..numberLocations)]),
    plan_setLiftMultiple_sequenceCrossOverAny_activation ->
    plan_setLiftMultiple_sequenceCrossOverAny_size =
    sum([toInt(q17 <=
               incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                   [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41]
               /\
               q17 <=
               incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                   [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42])
         *
         catchUndef(toInt(and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                                   [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux43, q17]
                               =
                               incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                                   [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42, q17],
                               q17 <=
                               plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                                   [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux43],
                               q17 <=
                               incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                                   [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42];
                                   int(1..3)])
                          /\
                          and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                                   [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux44, q17]
                               =
                               incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                                   [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41, q17],
                               q17 <=
                               plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                                   [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux44],
                               q17 <=
                               incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                                   [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41];
                                   int(1..3)])
                          /\
                          and([incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                                   [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41, q17]
                               !=
                               incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                                   [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42, q17],
                               q17 <=
                               incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                                   [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41],
                               q17 <=
                               incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                                   [plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42];
                                   int(1..3)])),
                    0)
             | q17 : int(1..numberLocations)]),
    plan_setLiftMultiple_sequenceCrossOverAny_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceCrossOverAny_activation ->
    (plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux43 = plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41
     \/
     plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux44 = plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41)
    /\
    (plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux43 = plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42
     \/
     plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux44 = plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42),
    plan_setLiftMultiple_sequenceCrossOverAny_activation ->
    (plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41 = plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux43
     \/
     plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42 = plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux43)
    /\
    (plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41 = plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux44
     \/
     plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42 = plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux44),
    plan_setLiftMultiple_sequenceCrossOverAny_activation -> true,
    !plan_setLiftMultiple_sequenceCrossOverAny_activation ->
    and([plan_setLiftMultiple_sequenceCrossOverAny_size = 1,
         plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux41 = 1,
         plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux42 = 1,
         plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux43 = 1,
         plan_setLiftMultiple_sequenceCrossOverAny_conjure_aux44 = 1;
             int(1..5)]),
    plan_setLiftMultiple_sequenceCrossOverSub_activation ->
    allDiff([plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45,
             plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46;
                 int(1..2)]),
    plan_setLiftMultiple_sequenceCrossOverSub_activation ->
    plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
    plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceCrossOverSub_activation ->
    allDiff([plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux47,
             plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux48;
                 int(1..2)]),
    plan_setLiftMultiple_sequenceCrossOverSub_activation ->
    plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux47 <= plan_ExplicitVarSizeWithMarkerR14_Marker /\
    plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux48 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceCrossOverSub_activation ->
    and([q89 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q89 = plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45 \/
           q89 = plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46)
         ->
         and([q103 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q89] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q89, q103] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q89, q103]
              /\ q103 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q89]
                  | q103 : int(1..numberLocations)])
         /\
         and([q104 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q89] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q89, q104] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q89, q104]
              /\ q104 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q89]
                  | q104 : int(1..numberLocations)])
         /\
         (and([q106 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q89] ->
               or([q108 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q89] /\ q108 = q106
                       | q108 : int(1..numberLocations)])
                   | q106 : int(1..numberLocations)])
          /\
          and([q110 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q89] ->
               or([q112 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q89] /\ q112 = q110
                       | q112 : int(1..numberLocations)])
                   | q110 : int(1..numberLocations)]))
             | q89 : int(1..numberLocations)]),
    plan_setLiftMultiple_sequenceCrossOverSub_activation ->
    and([plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux9 - plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux8
         = plan_setLiftMultiple_sequenceCrossOverSub_size,
         and([and([q16 < plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux8,
                   q16 > plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux9,
                   q16 <
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45],
                   q16 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46];
                       int(1..4)])
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux47, q16]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45, q16],
                   q16 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux47],
                   q16 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45];
                       int(1..3)])
              /\
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux48, q16]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46, q16],
                   q16 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux48],
                   q16 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46];
                       int(1..3)])
                  | q16 : int(1..numberLocations)]),
         and([q16 >= plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux8 /\
              q16 <= plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux9
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux47, q16]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46, q16],
                   q16 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux47],
                   q16 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46];
                       int(1..3)])
              /\
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux48, q16]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45, q16],
                   q16 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux48],
                   q16 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45];
                       int(1..3)])
                  | q16 : int(1..numberLocations)]);
             int(1..3)]),
    plan_setLiftMultiple_sequenceCrossOverSub_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceCrossOverSub_activation ->
    (plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux47 = plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45
     \/
     plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux48 = plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45)
    /\
    (plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux47 = plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46
     \/
     plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux48 = plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46),
    plan_setLiftMultiple_sequenceCrossOverSub_activation ->
    (plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45 = plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux47
     \/
     plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46 = plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux47)
    /\
    (plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45 = plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux48
     \/
     plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46 = plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux48),
    plan_setLiftMultiple_sequenceCrossOverSub_activation -> true,
    !plan_setLiftMultiple_sequenceCrossOverSub_activation ->
    and([plan_setLiftMultiple_sequenceCrossOverSub_size = 1, plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux8 = 1,
         plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux9 = 1,
         plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux45 = 1,
         plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux46 = 1,
         plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux47 = 1,
         plan_setLiftMultiple_sequenceCrossOverSub_conjure_aux48 = 1;
             int(1..7)]),
    plan_setLiftMultiple_sequenceMergeLeftOrRight_activation ->
    allDiff([plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux49,
             plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50;
                 int(1..2)]),
    plan_setLiftMultiple_sequenceMergeLeftOrRight_activation ->
    plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux49 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
    plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceMergeLeftOrRight_activation ->
    allDiff([plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51; int(1)]),
    plan_setLiftMultiple_sequenceMergeLeftOrRight_activation ->
    plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceMergeLeftOrRight_activation ->
    and([q113 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q113 = plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux49 \/
           q113 = plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50)
         ->
         and([q119 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q113] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q113, q119] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q113, q119]
              /\ q119 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q113]
                  | q119 : int(1..numberLocations)])
         /\
         and([q120 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q113] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q113, q120] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q113, q120]
              /\ q120 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q113]
                  | q120 : int(1..numberLocations)])
         /\
         (and([q122 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q113] ->
               or([q124 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q113] /\
                   q124 = q122
                       | q124 : int(1..numberLocations)])
                   | q122 : int(1..numberLocations)])
          /\
          and([q126 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q113] ->
               or([q128 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q113] /\ q128 = q126
                       | q128 : int(1..numberLocations)])
                   | q126 : int(1..numberLocations)]))
             | q113 : int(1..numberLocations)]),
    plan_setLiftMultiple_sequenceMergeLeftOrRight_activation ->
    and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51]
         =
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux49]
         +
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50],
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux49]
         = plan_setLiftMultiple_sequenceMergeLeftOrRight_size,
         and([q14 <= plan_setLiftMultiple_sequenceMergeLeftOrRight_size ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51, q14]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux49, q14],
                   q14 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51],
                   q14 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux49];
                       int(1..3)])
                  | q14 : int(1..numberLocations)])
         /\
         and([q14 <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50]
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51,
                        q14 + plan_setLiftMultiple_sequenceMergeLeftOrRight_size]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50, q14],
                   q14 + plan_setLiftMultiple_sequenceMergeLeftOrRight_size <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51],
                   q14 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50];
                       int(1..3)])
                  | q14 : int(1..numberLocations)])
         \/
         and([q14 <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50]
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51, q14]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50, q14],
                   q14 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51],
                   q14 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50];
                       int(1..3)])
                  | q14 : int(1..numberLocations)])
         /\
         and([q14 <= plan_setLiftMultiple_sequenceMergeLeftOrRight_size ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51,
                        q14 +
                        incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                            [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50]]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux49, q14],
                   q14 +
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50]
                   <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51],
                   q14 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux49];
                       int(1..3)])
                  | q14 : int(1..numberLocations)]);
             int(1..3)]),
    plan_setLiftMultiple_sequenceMergeLeftOrRight_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker + -1,
    plan_setLiftMultiple_sequenceMergeLeftOrRight_activation ->
    plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux49 =
    plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51
    \/
    plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50 =
    plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51,
    plan_setLiftMultiple_sequenceMergeLeftOrRight_activation -> true,
    !plan_setLiftMultiple_sequenceMergeLeftOrRight_activation ->
    and([plan_setLiftMultiple_sequenceMergeLeftOrRight_size = 1,
         plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux49 = 1,
         plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux50 = 1,
         plan_setLiftMultiple_sequenceMergeLeftOrRight_conjure_aux51 = 1;
             int(1..4)]),
    plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_activation ->
    allDiff([plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52,
             plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53;
                 int(1..2)]),
    plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_activation ->
    plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52 <=
    incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker
    /\
    plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53 <=
    incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_activation ->
    allDiff([plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux54,
             plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55;
                 int(1..2)]),
    plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_activation ->
    plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux54 <= plan_ExplicitVarSizeWithMarkerR14_Marker /\
    plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_activation ->
    and([q129 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q129 = plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52 \/
           q129 = plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53)
         ->
         and([q143 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q129] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q129, q143] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q129, q143]
              /\ q143 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q129]
                  | q143 : int(1..numberLocations)])
         /\
         and([q144 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q129] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q129, q144] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q129, q144]
              /\ q144 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q129]
                  | q144 : int(1..numberLocations)])
         /\
         (and([q146 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q129] ->
               or([q148 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q129] /\
                   q148 = q146
                       | q148 : int(1..numberLocations)])
                   | q146 : int(1..numberLocations)])
          /\
          and([q150 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q129] ->
               or([q152 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q129] /\ q152 = q150
                       | q152 : int(1..numberLocations)])
                   | q150 : int(1..numberLocations)]))
             | q129 : int(1..numberLocations)]),
    plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_activation ->
    and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux54]
         =
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52]
         - plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_size,
         plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55]
         =
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53]
         + plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_size,
         and([q12 <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux54]
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux54, q12]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52,
                        q12 + plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_size],
                   q12 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux54],
                   q12 + plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_size <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52];
                       int(1..3)])
                  | q12 : int(1..numberLocations)]),
         and([q12 <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53]
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55, q12]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53, q12],
                   q12 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55],
                   q12 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53];
                       int(1..3)])
                  | q12 : int(1..numberLocations)])
         /\
         and([q12 <= plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_size ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55,
                        incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                            [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53]
                        + q12]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52, q12],
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53]
                   + q12
                   <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55],
                   q12 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52];
                       int(1..3)])
                  | q12 : int(1..numberLocations)])
         \/
         and([q12 <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53]
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55,
                        q12 + plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_size]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53, q12],
                   q12 + plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_size <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55],
                   q12 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53];
                       int(1..3)])
                  | q12 : int(1..numberLocations)])
         /\
         and([q12 <= plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_size ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55, q12]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52, q12],
                   q12 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55],
                   q12 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52];
                       int(1..3)])
                  | q12 : int(1..numberLocations)]);
             int(1..4)]),
    plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_activation ->
    (plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux54 =
     plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52
     \/
     plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55 =
     plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52)
    /\
    (plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux54 =
     plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53
     \/
     plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55 =
     plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53),
    plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_activation ->
    (plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52 =
     plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux54
     \/
     plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53 =
     plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux54)
    /\
    (plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52 =
     plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55
     \/
     plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53 =
     plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55),
    plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_activation -> true,
    !plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_activation ->
    and([plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_size = 1,
         plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux52 = 1,
         plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux53 = 1,
         plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux54 = 1,
         plan_setLiftMultiple_sequenceRemoveLeftAddLeftOrRight_conjure_aux55 = 1;
             int(1..5)]),
    plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_activation ->
    allDiff([plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56,
             plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57;
                 int(1..2)]),
    plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_activation ->
    plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56 <=
    incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker
    /\
    plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57 <=
    incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_activation ->
    allDiff([plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58,
             plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59;
                 int(1..2)]),
    plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_activation ->
    plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58 <= plan_ExplicitVarSizeWithMarkerR14_Marker /\
    plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_activation ->
    and([q153 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q153 = plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56 \/
           q153 = plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57)
         ->
         and([q167 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q153] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q153, q167] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q153, q167]
              /\ q167 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q153]
                  | q167 : int(1..numberLocations)])
         /\
         and([q168 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q153] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q153, q168] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q153, q168]
              /\ q168 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q153]
                  | q168 : int(1..numberLocations)])
         /\
         (and([q170 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q153] ->
               or([q172 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q153] /\
                   q172 = q170
                       | q172 : int(1..numberLocations)])
                   | q170 : int(1..numberLocations)])
          /\
          and([q174 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q153] ->
               or([q176 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q153] /\ q176 = q174
                       | q176 : int(1..numberLocations)])
                   | q174 : int(1..numberLocations)]))
             | q153 : int(1..numberLocations)]),
    plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_activation ->
    and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58]
         =
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56]
         - plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_size,
         plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59]
         =
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57]
         + plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_size,
         and([q13 <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58]
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58, q13]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56, q13],
                   q13 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58],
                   q13 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56];
                       int(1..3)])
                  | q13 : int(1..numberLocations)]),
         and([q13 <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57]
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59, q13]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57, q13],
                   q13 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59],
                   q13 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57];
                       int(1..3)])
                  | q13 : int(1..numberLocations)])
         /\
         and([q13 >
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58]
              /\
              q13 <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59]
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59, q13]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56, q13],
                   q13 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59],
                   q13 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56];
                       int(1..3)])
                  | q13 : int(1..numberLocations)])
         \/
         and([q13 <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57]
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59,
                        q13 + plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_size]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57, q13],
                   q13 + plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_size <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59],
                   q13 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57];
                       int(1..3)])
                  | q13 : int(1..numberLocations)])
         /\
         and([q13 <= plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_size ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59, q13]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56,
                        plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                            [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58]
                        + q13],
                   q13 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59],
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58]
                   + q13
                   <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56];
                       int(1..3)])
                  | q13 : int(1..numberLocations)]);
             int(1..4)]),
    plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_activation ->
    (plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58 =
     plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56
     \/
     plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59 =
     plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56)
    /\
    (plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58 =
     plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57
     \/
     plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59 =
     plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57),
    plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_activation ->
    (plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56 =
     plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58
     \/
     plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57 =
     plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58)
    /\
    (plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56 =
     plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59
     \/
     plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57 =
     plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59),
    plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_activation -> true,
    !plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_activation ->
    and([plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_size = 1,
         plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux56 = 1,
         plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux57 = 1,
         plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux58 = 1,
         plan_setLiftMultiple_sequenceRemoveRightAddLeftOrRight_conjure_aux59 = 1;
             int(1..5)]),
    plan_setLiftMultiple_sequenceSplitLeftOrRight_activation ->
    allDiff([plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60; int(1)]),
    plan_setLiftMultiple_sequenceSplitLeftOrRight_activation ->
    plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceSplitLeftOrRight_activation ->
    allDiff([plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61,
             plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux62;
                 int(1..2)]),
    plan_setLiftMultiple_sequenceSplitLeftOrRight_activation ->
    plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61 <= plan_ExplicitVarSizeWithMarkerR14_Marker /\
    plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux62 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftMultiple_sequenceSplitLeftOrRight_activation ->
    and([q177 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q177 = plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60)
         ->
         and([q183 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q177] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q177, q183] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q177, q183]
              /\ q183 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q177]
                  | q183 : int(1..numberLocations)])
         /\
         and([q184 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q177] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q177, q184] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q177, q184]
              /\ q184 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q177]
                  | q184 : int(1..numberLocations)])
         /\
         (and([q186 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q177] ->
               or([q188 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q177] /\
                   q188 = q186
                       | q188 : int(1..numberLocations)])
                   | q186 : int(1..numberLocations)])
          /\
          and([q190 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q177] ->
               or([q192 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q177] /\ q192 = q190
                       | q192 : int(1..numberLocations)])
                   | q190 : int(1..numberLocations)]))
             | q177 : int(1..numberLocations)]),
    plan_setLiftMultiple_sequenceSplitLeftOrRight_activation ->
    and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61]
         =
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60]
         - plan_setLiftMultiple_sequenceSplitLeftOrRight_size,
         plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux62]
         = plan_setLiftMultiple_sequenceSplitLeftOrRight_size,
         and([q15 <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61]
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61, q15]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60,
                        q15 + plan_setLiftMultiple_sequenceSplitLeftOrRight_size],
                   q15 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61],
                   q15 + plan_setLiftMultiple_sequenceSplitLeftOrRight_size <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60];
                       int(1..3)])
                  | q15 : int(1..numberLocations)])
         /\
         and([q15 <= plan_setLiftMultiple_sequenceSplitLeftOrRight_size ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux62, q15]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60, q15],
                   q15 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux62],
                   q15 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60];
                       int(1..3)])
                  | q15 : int(1..numberLocations)])
         \/
         and([q15 <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61]
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61, q15]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60, q15],
                   q15 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61],
                   q15 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60];
                       int(1..3)])
                  | q15 : int(1..numberLocations)])
         /\
         and([q15 <= plan_setLiftMultiple_sequenceSplitLeftOrRight_size ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux62, q15]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60,
                        q15 +
                        plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                            [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61]],
                   q15 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux62],
                   q15 +
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61]
                   <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60];
                       int(1..3)])
                  | q15 : int(1..numberLocations)]);
             int(1..3)]),
    plan_setLiftMultiple_sequenceSplitLeftOrRight_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker + 1,
    plan_setLiftMultiple_sequenceSplitLeftOrRight_activation ->
    plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61 =
    plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60
    \/
    plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux62 =
    plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60,
    plan_setLiftMultiple_sequenceSplitLeftOrRight_activation -> true,
    !plan_setLiftMultiple_sequenceSplitLeftOrRight_activation ->
    and([plan_setLiftMultiple_sequenceSplitLeftOrRight_size = 1,
         plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux60 = 1,
         plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux61 = 1,
         plan_setLiftMultiple_sequenceSplitLeftOrRight_conjure_aux62 = 1;
             int(1..4)]),
    plan_setLiftSingle_sequenceAddLeft_activation ->
    allDiff([plan_setLiftSingle_sequenceAddLeft_conjure_aux63; int(1)]),
    plan_setLiftSingle_sequenceAddLeft_activation ->
    plan_setLiftSingle_sequenceAddLeft_conjure_aux63 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceAddLeft_activation ->
    allDiff([plan_setLiftSingle_sequenceAddLeft_conjure_aux64; int(1)]),
    plan_setLiftSingle_sequenceAddLeft_activation ->
    plan_setLiftSingle_sequenceAddLeft_conjure_aux64 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceAddLeft_activation ->
    and([q193 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q193 = plan_setLiftSingle_sequenceAddLeft_conjure_aux63)
         ->
         and([q203 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q193] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q193, q203] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q193, q203]
              /\ q203 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q193]
                  | q203 : int(1..numberLocations)])
         /\
         and([q204 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q193] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q193, q204] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q193, q204]
              /\ q204 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q193]
                  | q204 : int(1..numberLocations)])
         /\
         (and([q206 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q193] ->
               or([q208 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q193] /\
                   q208 = q206
                       | q208 : int(1..numberLocations)])
                   | q206 : int(1..numberLocations)])
          /\
          and([q210 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q193] ->
               or([q212 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q193] /\ q212 = q210
                       | q212 : int(1..numberLocations)])
                   | q210 : int(1..numberLocations)]))
             | q193 : int(1..numberLocations)]),
    plan_setLiftSingle_sequenceAddLeft_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setLiftSingle_sequenceAddLeft_conjure_aux64] =
    incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
        [plan_setLiftSingle_sequenceAddLeft_conjure_aux63]
    + plan_setLiftSingle_sequenceAddLeft_size
    /\
    and([q9 <=
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftSingle_sequenceAddLeft_conjure_aux63]
         ->
         and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                  [plan_setLiftSingle_sequenceAddLeft_conjure_aux64, q9 + plan_setLiftSingle_sequenceAddLeft_size]
              =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                  [plan_setLiftSingle_sequenceAddLeft_conjure_aux63, q9],
              q9 + plan_setLiftSingle_sequenceAddLeft_size <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceAddLeft_conjure_aux64],
              q9 <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceAddLeft_conjure_aux63];
                  int(1..3)])
             | q9 : int(1..numberLocations)]),
    plan_setLiftSingle_sequenceAddLeft_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceAddLeft_activation ->
    plan_setLiftSingle_sequenceAddLeft_conjure_aux64 = plan_setLiftSingle_sequenceAddLeft_conjure_aux63,
    plan_setLiftSingle_sequenceAddLeft_activation ->
    plan_setLiftSingle_sequenceAddLeft_conjure_aux63 = plan_setLiftSingle_sequenceAddLeft_conjure_aux64,
    plan_setLiftSingle_sequenceAddLeft_activation -> true,
    !plan_setLiftSingle_sequenceAddLeft_activation ->
    and([plan_setLiftSingle_sequenceAddLeft_size = 1, plan_setLiftSingle_sequenceAddLeft_conjure_aux63 = 1,
         plan_setLiftSingle_sequenceAddLeft_conjure_aux64 = 1;
             int(1..3)]),
    plan_setLiftSingle_sequenceAddRight_activation ->
    allDiff([plan_setLiftSingle_sequenceAddRight_conjure_aux65; int(1)]),
    plan_setLiftSingle_sequenceAddRight_activation ->
    plan_setLiftSingle_sequenceAddRight_conjure_aux65 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceAddRight_activation ->
    allDiff([plan_setLiftSingle_sequenceAddRight_conjure_aux66; int(1)]),
    plan_setLiftSingle_sequenceAddRight_activation ->
    plan_setLiftSingle_sequenceAddRight_conjure_aux66 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceAddRight_activation ->
    and([q213 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q213 = plan_setLiftSingle_sequenceAddRight_conjure_aux65)
         ->
         and([q223 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q213] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q213, q223] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q213, q223]
              /\ q223 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q213]
                  | q223 : int(1..numberLocations)])
         /\
         and([q224 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q213] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q213, q224] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q213, q224]
              /\ q224 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q213]
                  | q224 : int(1..numberLocations)])
         /\
         (and([q226 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q213] ->
               or([q228 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q213] /\
                   q228 = q226
                       | q228 : int(1..numberLocations)])
                   | q226 : int(1..numberLocations)])
          /\
          and([q230 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q213] ->
               or([q232 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q213] /\ q232 = q230
                       | q232 : int(1..numberLocations)])
                   | q230 : int(1..numberLocations)]))
             | q213 : int(1..numberLocations)]),
    plan_setLiftSingle_sequenceAddRight_activation ->
    and([q8 <=
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftSingle_sequenceAddRight_conjure_aux65]
         ->
         and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                  [plan_setLiftSingle_sequenceAddRight_conjure_aux66, q8]
              =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                  [plan_setLiftSingle_sequenceAddRight_conjure_aux65, q8],
              q8 <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceAddRight_conjure_aux66],
              q8 <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceAddRight_conjure_aux65];
                  int(1..3)])
             | q8 : int(1..numberLocations)])
    /\
    plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setLiftSingle_sequenceAddRight_conjure_aux66] =
    incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
        [plan_setLiftSingle_sequenceAddRight_conjure_aux65]
    + plan_setLiftSingle_sequenceAddRight_size,
    plan_setLiftSingle_sequenceAddRight_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceAddRight_activation ->
    plan_setLiftSingle_sequenceAddRight_conjure_aux66 = plan_setLiftSingle_sequenceAddRight_conjure_aux65,
    plan_setLiftSingle_sequenceAddRight_activation ->
    plan_setLiftSingle_sequenceAddRight_conjure_aux65 = plan_setLiftSingle_sequenceAddRight_conjure_aux66,
    plan_setLiftSingle_sequenceAddRight_activation -> true,
    !plan_setLiftSingle_sequenceAddRight_activation ->
    and([plan_setLiftSingle_sequenceAddRight_size = 1, plan_setLiftSingle_sequenceAddRight_conjure_aux65 = 1,
         plan_setLiftSingle_sequenceAddRight_conjure_aux66 = 1;
             int(1..3)]),
    plan_setLiftSingle_sequenceAnySwap_activation ->
    allDiff([plan_setLiftSingle_sequenceAnySwap_conjure_aux67; int(1)]),
    plan_setLiftSingle_sequenceAnySwap_activation ->
    plan_setLiftSingle_sequenceAnySwap_conjure_aux67 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceAnySwap_activation ->
    allDiff([plan_setLiftSingle_sequenceAnySwap_conjure_aux68; int(1)]),
    plan_setLiftSingle_sequenceAnySwap_activation ->
    plan_setLiftSingle_sequenceAnySwap_conjure_aux68 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceAnySwap_activation ->
    and([q233 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q233 = plan_setLiftSingle_sequenceAnySwap_conjure_aux67)
         ->
         and([q243 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q233] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q233, q243] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q233, q243]
              /\ q243 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q233]
                  | q243 : int(1..numberLocations)])
         /\
         and([q244 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q233] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q233, q244] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q233, q244]
              /\ q244 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q233]
                  | q244 : int(1..numberLocations)])
         /\
         (and([q246 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q233] ->
               or([q248 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q233] /\
                   q248 = q246
                       | q248 : int(1..numberLocations)])
                   | q246 : int(1..numberLocations)])
          /\
          and([q250 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q233] ->
               or([q252 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q233] /\ q252 = q250
                       | q252 : int(1..numberLocations)])
                   | q250 : int(1..numberLocations)]))
             | q233 : int(1..numberLocations)]),
    plan_setLiftSingle_sequenceAnySwap_activation ->
    plan_setLiftSingle_sequenceAnySwap_size * 2 =
    sum([toInt(q4 <=
               plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                   [plan_setLiftSingle_sequenceAnySwap_conjure_aux68])
         *
         catchUndef(toInt(and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                                   [plan_setLiftSingle_sequenceAnySwap_conjure_aux68, q4]
                               !=
                               incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                                   [plan_setLiftSingle_sequenceAnySwap_conjure_aux67, q4],
                               q4 <=
                               plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                                   [plan_setLiftSingle_sequenceAnySwap_conjure_aux68],
                               q4 <=
                               incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                                   [plan_setLiftSingle_sequenceAnySwap_conjure_aux67];
                                   int(1..3)])),
                    0)
             | q4 : int(1..numberLocations)]),
    plan_setLiftSingle_sequenceAnySwap_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceAnySwap_activation ->
    plan_setLiftSingle_sequenceAnySwap_conjure_aux68 = plan_setLiftSingle_sequenceAnySwap_conjure_aux67,
    plan_setLiftSingle_sequenceAnySwap_activation ->
    plan_setLiftSingle_sequenceAnySwap_conjure_aux67 = plan_setLiftSingle_sequenceAnySwap_conjure_aux68,
    plan_setLiftSingle_sequenceAnySwap_activation -> true,
    !plan_setLiftSingle_sequenceAnySwap_activation ->
    and([plan_setLiftSingle_sequenceAnySwap_size = 1, plan_setLiftSingle_sequenceAnySwap_conjure_aux67 = 1,
         plan_setLiftSingle_sequenceAnySwap_conjure_aux68 = 1;
             int(1..3)]),
    plan_setLiftSingle_sequenceRelaxSub_activation ->
    allDiff([plan_setLiftSingle_sequenceRelaxSub_conjure_aux69; int(1)]),
    plan_setLiftSingle_sequenceRelaxSub_activation ->
    plan_setLiftSingle_sequenceRelaxSub_conjure_aux69 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRelaxSub_activation ->
    allDiff([plan_setLiftSingle_sequenceRelaxSub_conjure_aux70; int(1)]),
    plan_setLiftSingle_sequenceRelaxSub_activation ->
    plan_setLiftSingle_sequenceRelaxSub_conjure_aux70 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRelaxSub_activation ->
    and([q253 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q253 = plan_setLiftSingle_sequenceRelaxSub_conjure_aux69)
         ->
         and([q263 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q253] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q253, q263] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q253, q263]
              /\ q263 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q253]
                  | q263 : int(1..numberLocations)])
         /\
         and([q264 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q253] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q253, q264] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q253, q264]
              /\ q264 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q253]
                  | q264 : int(1..numberLocations)])
         /\
         (and([q266 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q253] ->
               or([q268 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q253] /\
                   q268 = q266
                       | q268 : int(1..numberLocations)])
                   | q266 : int(1..numberLocations)])
          /\
          and([q270 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q253] ->
               or([q272 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q253] /\ q272 = q270
                       | q272 : int(1..numberLocations)])
                   | q270 : int(1..numberLocations)]))
             | q253 : int(1..numberLocations)]),
    plan_setLiftSingle_sequenceRelaxSub_activation ->
    and([plan_setLiftSingle_sequenceRelaxSub_conjure_aux6 - plan_setLiftSingle_sequenceRelaxSub_conjure_aux5 =
         plan_setLiftSingle_sequenceRelaxSub_size,
         plan_setLiftSingle_sequenceRelaxSub_conjure_aux5 <=
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftSingle_sequenceRelaxSub_conjure_aux69],
         plan_setLiftSingle_sequenceRelaxSub_conjure_aux6 <=
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftSingle_sequenceRelaxSub_conjure_aux69],
         and([q5 <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceRelaxSub_conjure_aux70]
              /\
              (q5 < plan_setLiftSingle_sequenceRelaxSub_conjure_aux5 \/
               q5 > plan_setLiftSingle_sequenceRelaxSub_conjure_aux6)
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftSingle_sequenceRelaxSub_conjure_aux70, q5]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftSingle_sequenceRelaxSub_conjure_aux69, q5],
                   q5 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftSingle_sequenceRelaxSub_conjure_aux70],
                   q5 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftSingle_sequenceRelaxSub_conjure_aux69];
                       int(1..3)])
                  | q5 : int(1..numberLocations)]),
         plan_setLiftSingle_sequenceRelaxSub_conjure_aux7 >= plan_setLiftSingle_sequenceRelaxSub_conjure_aux5,
         plan_setLiftSingle_sequenceRelaxSub_conjure_aux7 <= plan_setLiftSingle_sequenceRelaxSub_conjure_aux6,
         and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                  [plan_setLiftSingle_sequenceRelaxSub_conjure_aux70, plan_setLiftSingle_sequenceRelaxSub_conjure_aux7]
              !=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                  [plan_setLiftSingle_sequenceRelaxSub_conjure_aux69, plan_setLiftSingle_sequenceRelaxSub_conjure_aux7],
              plan_setLiftSingle_sequenceRelaxSub_conjure_aux7 <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceRelaxSub_conjure_aux70],
              plan_setLiftSingle_sequenceRelaxSub_conjure_aux7 <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceRelaxSub_conjure_aux69];
                  int(1..3)]);
             int(1..7)]),
    plan_setLiftSingle_sequenceRelaxSub_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRelaxSub_activation ->
    plan_setLiftSingle_sequenceRelaxSub_conjure_aux70 = plan_setLiftSingle_sequenceRelaxSub_conjure_aux69,
    plan_setLiftSingle_sequenceRelaxSub_activation ->
    plan_setLiftSingle_sequenceRelaxSub_conjure_aux69 = plan_setLiftSingle_sequenceRelaxSub_conjure_aux70,
    plan_setLiftSingle_sequenceRelaxSub_activation -> true,
    !plan_setLiftSingle_sequenceRelaxSub_activation ->
    and([plan_setLiftSingle_sequenceRelaxSub_size = 1, plan_setLiftSingle_sequenceRelaxSub_conjure_aux5 = 1,
         plan_setLiftSingle_sequenceRelaxSub_conjure_aux6 = 1, plan_setLiftSingle_sequenceRelaxSub_conjure_aux7 = 1,
         plan_setLiftSingle_sequenceRelaxSub_conjure_aux69 = 1, plan_setLiftSingle_sequenceRelaxSub_conjure_aux70 = 1;
             int(1..6)]),
    plan_setLiftSingle_sequenceRemoveLeft_activation ->
    allDiff([plan_setLiftSingle_sequenceRemoveLeft_conjure_aux71; int(1)]),
    plan_setLiftSingle_sequenceRemoveLeft_activation ->
    plan_setLiftSingle_sequenceRemoveLeft_conjure_aux71 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRemoveLeft_activation ->
    allDiff([plan_setLiftSingle_sequenceRemoveLeft_conjure_aux72; int(1)]),
    plan_setLiftSingle_sequenceRemoveLeft_activation ->
    plan_setLiftSingle_sequenceRemoveLeft_conjure_aux72 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRemoveLeft_activation ->
    and([q273 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q273 = plan_setLiftSingle_sequenceRemoveLeft_conjure_aux71)
         ->
         and([q283 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q273] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q273, q283] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q273, q283]
              /\ q283 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q273]
                  | q283 : int(1..numberLocations)])
         /\
         and([q284 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q273] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q273, q284] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q273, q284]
              /\ q284 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q273]
                  | q284 : int(1..numberLocations)])
         /\
         (and([q286 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q273] ->
               or([q288 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q273] /\
                   q288 = q286
                       | q288 : int(1..numberLocations)])
                   | q286 : int(1..numberLocations)])
          /\
          and([q290 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q273] ->
               or([q292 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q273] /\ q292 = q290
                       | q292 : int(1..numberLocations)])
                   | q290 : int(1..numberLocations)]))
             | q273 : int(1..numberLocations)]),
    plan_setLiftSingle_sequenceRemoveLeft_activation ->
    and([q11 <=
         plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftSingle_sequenceRemoveLeft_conjure_aux72]
         ->
         and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                  [plan_setLiftSingle_sequenceRemoveLeft_conjure_aux72, q11]
              =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                  [plan_setLiftSingle_sequenceRemoveLeft_conjure_aux71,
                   q11 + plan_setLiftSingle_sequenceRemoveLeft_size],
              q11 <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceRemoveLeft_conjure_aux72],
              q11 + plan_setLiftSingle_sequenceRemoveLeft_size <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceRemoveLeft_conjure_aux71];
                  int(1..3)])
             | q11 : int(1..numberLocations)])
    /\
    plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setLiftSingle_sequenceRemoveLeft_conjure_aux72]
    =
    incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
        [plan_setLiftSingle_sequenceRemoveLeft_conjure_aux71]
    - plan_setLiftSingle_sequenceRemoveLeft_size,
    plan_setLiftSingle_sequenceRemoveLeft_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRemoveLeft_activation ->
    plan_setLiftSingle_sequenceRemoveLeft_conjure_aux72 = plan_setLiftSingle_sequenceRemoveLeft_conjure_aux71,
    plan_setLiftSingle_sequenceRemoveLeft_activation ->
    plan_setLiftSingle_sequenceRemoveLeft_conjure_aux71 = plan_setLiftSingle_sequenceRemoveLeft_conjure_aux72,
    plan_setLiftSingle_sequenceRemoveLeft_activation -> true,
    !plan_setLiftSingle_sequenceRemoveLeft_activation ->
    and([plan_setLiftSingle_sequenceRemoveLeft_size = 1, plan_setLiftSingle_sequenceRemoveLeft_conjure_aux71 = 1,
         plan_setLiftSingle_sequenceRemoveLeft_conjure_aux72 = 1;
             int(1..3)]),
    plan_setLiftSingle_sequenceRemoveRight_activation ->
    allDiff([plan_setLiftSingle_sequenceRemoveRight_conjure_aux73; int(1)]),
    plan_setLiftSingle_sequenceRemoveRight_activation ->
    plan_setLiftSingle_sequenceRemoveRight_conjure_aux73 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRemoveRight_activation ->
    allDiff([plan_setLiftSingle_sequenceRemoveRight_conjure_aux74; int(1)]),
    plan_setLiftSingle_sequenceRemoveRight_activation ->
    plan_setLiftSingle_sequenceRemoveRight_conjure_aux74 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRemoveRight_activation ->
    and([q293 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q293 = plan_setLiftSingle_sequenceRemoveRight_conjure_aux73)
         ->
         and([q303 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q293] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q293, q303] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q293, q303]
              /\ q303 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q293]
                  | q303 : int(1..numberLocations)])
         /\
         and([q304 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q293] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q293, q304] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q293, q304]
              /\ q304 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q293]
                  | q304 : int(1..numberLocations)])
         /\
         (and([q306 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q293] ->
               or([q308 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q293] /\
                   q308 = q306
                       | q308 : int(1..numberLocations)])
                   | q306 : int(1..numberLocations)])
          /\
          and([q310 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q293] ->
               or([q312 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q293] /\ q312 = q310
                       | q312 : int(1..numberLocations)])
                   | q310 : int(1..numberLocations)]))
             | q293 : int(1..numberLocations)]),
    plan_setLiftSingle_sequenceRemoveRight_activation ->
    and([q10 <=
         plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftSingle_sequenceRemoveRight_conjure_aux74]
         ->
         and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                  [plan_setLiftSingle_sequenceRemoveRight_conjure_aux74, q10]
              =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                  [plan_setLiftSingle_sequenceRemoveRight_conjure_aux73, q10],
              q10 <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceRemoveRight_conjure_aux74],
              q10 <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceRemoveRight_conjure_aux73];
                  int(1..3)])
             | q10 : int(1..numberLocations)])
    /\
    plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
        [plan_setLiftSingle_sequenceRemoveRight_conjure_aux74]
    =
    incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
        [plan_setLiftSingle_sequenceRemoveRight_conjure_aux73]
    - plan_setLiftSingle_sequenceRemoveRight_size,
    plan_setLiftSingle_sequenceRemoveRight_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRemoveRight_activation ->
    plan_setLiftSingle_sequenceRemoveRight_conjure_aux74 = plan_setLiftSingle_sequenceRemoveRight_conjure_aux73,
    plan_setLiftSingle_sequenceRemoveRight_activation ->
    plan_setLiftSingle_sequenceRemoveRight_conjure_aux73 = plan_setLiftSingle_sequenceRemoveRight_conjure_aux74,
    plan_setLiftSingle_sequenceRemoveRight_activation -> true,
    !plan_setLiftSingle_sequenceRemoveRight_activation ->
    and([plan_setLiftSingle_sequenceRemoveRight_size = 1, plan_setLiftSingle_sequenceRemoveRight_conjure_aux73 = 1,
         plan_setLiftSingle_sequenceRemoveRight_conjure_aux74 = 1;
             int(1..3)]),
    plan_setLiftSingle_sequenceReverseSub_activation ->
    allDiff([plan_setLiftSingle_sequenceReverseSub_conjure_aux75; int(1)]),
    plan_setLiftSingle_sequenceReverseSub_activation ->
    plan_setLiftSingle_sequenceReverseSub_conjure_aux75 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceReverseSub_activation ->
    allDiff([plan_setLiftSingle_sequenceReverseSub_conjure_aux76; int(1)]),
    plan_setLiftSingle_sequenceReverseSub_activation ->
    plan_setLiftSingle_sequenceReverseSub_conjure_aux76 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceReverseSub_activation ->
    and([q313 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q313 = plan_setLiftSingle_sequenceReverseSub_conjure_aux75)
         ->
         and([q323 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q313] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q313, q323] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q313, q323]
              /\ q323 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q313]
                  | q323 : int(1..numberLocations)])
         /\
         and([q324 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q313] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q313, q324] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q313, q324]
              /\ q324 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q313]
                  | q324 : int(1..numberLocations)])
         /\
         (and([q326 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q313] ->
               or([q328 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q313] /\
                   q328 = q326
                       | q328 : int(1..numberLocations)])
                   | q326 : int(1..numberLocations)])
          /\
          and([q330 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q313] ->
               or([q332 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q313] /\ q332 = q330
                       | q332 : int(1..numberLocations)])
                   | q330 : int(1..numberLocations)]))
             | q313 : int(1..numberLocations)]),
    plan_setLiftSingle_sequenceReverseSub_activation ->
    and([plan_setLiftSingle_sequenceReverseSub_conjure_aux4 - plan_setLiftSingle_sequenceReverseSub_conjure_aux3 =
         plan_setLiftSingle_sequenceReverseSub_size,
         plan_setLiftSingle_sequenceReverseSub_conjure_aux3 <=
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftSingle_sequenceReverseSub_conjure_aux75],
         plan_setLiftSingle_sequenceReverseSub_conjure_aux4 <=
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftSingle_sequenceReverseSub_conjure_aux75],
         and([(q3 < plan_setLiftSingle_sequenceReverseSub_conjure_aux3 \/
               q3 > plan_setLiftSingle_sequenceReverseSub_conjure_aux4)
              /\
              q3 <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceReverseSub_conjure_aux76]
              ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftSingle_sequenceReverseSub_conjure_aux76, q3]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftSingle_sequenceReverseSub_conjure_aux75, q3],
                   q3 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftSingle_sequenceReverseSub_conjure_aux76],
                   q3 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftSingle_sequenceReverseSub_conjure_aux75];
                       int(1..3)])
                  | q3 : int(1..numberLocations)]),
         and([q3 <= plan_setLiftSingle_sequenceReverseSub_size ->
              and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftSingle_sequenceReverseSub_conjure_aux76,
                        plan_setLiftSingle_sequenceReverseSub_conjure_aux3 + q3]
                   =
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                       [plan_setLiftSingle_sequenceReverseSub_conjure_aux75,
                        plan_setLiftSingle_sequenceReverseSub_conjure_aux4 - q3],
                   plan_setLiftSingle_sequenceReverseSub_conjure_aux3 + q3 <=
                   plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftSingle_sequenceReverseSub_conjure_aux76],
                   plan_setLiftSingle_sequenceReverseSub_conjure_aux4 - q3 <=
                   incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                       [plan_setLiftSingle_sequenceReverseSub_conjure_aux75];
                       int(1..3)])
                  | q3 : int(0..numberLocations)]);
             int(1..5)]),
    plan_setLiftSingle_sequenceReverseSub_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceReverseSub_activation ->
    plan_setLiftSingle_sequenceReverseSub_conjure_aux76 = plan_setLiftSingle_sequenceReverseSub_conjure_aux75,
    plan_setLiftSingle_sequenceReverseSub_activation ->
    plan_setLiftSingle_sequenceReverseSub_conjure_aux75 = plan_setLiftSingle_sequenceReverseSub_conjure_aux76,
    plan_setLiftSingle_sequenceReverseSub_activation -> true,
    !plan_setLiftSingle_sequenceReverseSub_activation ->
    and([plan_setLiftSingle_sequenceReverseSub_size = 1, plan_setLiftSingle_sequenceReverseSub_conjure_aux3 = 1,
         plan_setLiftSingle_sequenceReverseSub_conjure_aux4 = 1,
         plan_setLiftSingle_sequenceReverseSub_conjure_aux75 = 1,
         plan_setLiftSingle_sequenceReverseSub_conjure_aux76 = 1;
             int(1..5)]),
    plan_setLiftSingle_sequenceRotateLeft_activation ->
    allDiff([plan_setLiftSingle_sequenceRotateLeft_conjure_aux77; int(1)]),
    plan_setLiftSingle_sequenceRotateLeft_activation ->
    plan_setLiftSingle_sequenceRotateLeft_conjure_aux77 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRotateLeft_activation ->
    allDiff([plan_setLiftSingle_sequenceRotateLeft_conjure_aux78; int(1)]),
    plan_setLiftSingle_sequenceRotateLeft_activation ->
    plan_setLiftSingle_sequenceRotateLeft_conjure_aux78 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRotateLeft_activation ->
    and([q333 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q333 = plan_setLiftSingle_sequenceRotateLeft_conjure_aux77)
         ->
         and([q343 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q333] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q333, q343] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q333, q343]
              /\ q343 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q333]
                  | q343 : int(1..numberLocations)])
         /\
         and([q344 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q333] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q333, q344] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q333, q344]
              /\ q344 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q333]
                  | q344 : int(1..numberLocations)])
         /\
         (and([q346 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q333] ->
               or([q348 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q333] /\
                   q348 = q346
                       | q348 : int(1..numberLocations)])
                   | q346 : int(1..numberLocations)])
          /\
          and([q350 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q333] ->
               or([q352 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q333] /\ q352 = q350
                       | q352 : int(1..numberLocations)])
                   | q350 : int(1..numberLocations)]))
             | q333 : int(1..numberLocations)]),
    plan_setLiftSingle_sequenceRotateLeft_activation ->
    and([q7 <=
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftSingle_sequenceRotateLeft_conjure_aux77]
         ->
         and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                  [plan_setLiftSingle_sequenceRotateLeft_conjure_aux78, q7]
              =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                  [plan_setLiftSingle_sequenceRotateLeft_conjure_aux77,
                   (q7 - 1 - plan_setLiftSingle_sequenceRotateLeft_size) %
                   (incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                        [plan_setLiftSingle_sequenceRotateLeft_conjure_aux77]
                    - 1)
                   + 1],
              q7 <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceRotateLeft_conjure_aux78],
              (q7 - 1 - plan_setLiftSingle_sequenceRotateLeft_size) %
              (incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                   [plan_setLiftSingle_sequenceRotateLeft_conjure_aux77]
               - 1)
              + 1
              <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceRotateLeft_conjure_aux77];
                  int(1..3)])
             | q7 : int(1..numberLocations)]),
    plan_setLiftSingle_sequenceRotateLeft_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRotateLeft_activation ->
    plan_setLiftSingle_sequenceRotateLeft_conjure_aux78 = plan_setLiftSingle_sequenceRotateLeft_conjure_aux77,
    plan_setLiftSingle_sequenceRotateLeft_activation ->
    plan_setLiftSingle_sequenceRotateLeft_conjure_aux77 = plan_setLiftSingle_sequenceRotateLeft_conjure_aux78,
    plan_setLiftSingle_sequenceRotateLeft_activation -> true,
    !plan_setLiftSingle_sequenceRotateLeft_activation ->
    and([plan_setLiftSingle_sequenceRotateLeft_size = 1, plan_setLiftSingle_sequenceRotateLeft_conjure_aux77 = 1,
         plan_setLiftSingle_sequenceRotateLeft_conjure_aux78 = 1;
             int(1..3)]),
    plan_setLiftSingle_sequenceRotateRight_activation ->
    allDiff([plan_setLiftSingle_sequenceRotateRight_conjure_aux79; int(1)]),
    plan_setLiftSingle_sequenceRotateRight_activation ->
    plan_setLiftSingle_sequenceRotateRight_conjure_aux79 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRotateRight_activation ->
    allDiff([plan_setLiftSingle_sequenceRotateRight_conjure_aux80; int(1)]),
    plan_setLiftSingle_sequenceRotateRight_activation ->
    plan_setLiftSingle_sequenceRotateRight_conjure_aux80 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRotateRight_activation ->
    and([q353 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q353 = plan_setLiftSingle_sequenceRotateRight_conjure_aux79)
         ->
         and([q363 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q353] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q353, q363] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q353, q363]
              /\ q363 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q353]
                  | q363 : int(1..numberLocations)])
         /\
         and([q364 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q353] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q353, q364] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q353, q364]
              /\ q364 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q353]
                  | q364 : int(1..numberLocations)])
         /\
         (and([q366 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q353] ->
               or([q368 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q353] /\
                   q368 = q366
                       | q368 : int(1..numberLocations)])
                   | q366 : int(1..numberLocations)])
          /\
          and([q370 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q353] ->
               or([q372 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q353] /\ q372 = q370
                       | q372 : int(1..numberLocations)])
                   | q370 : int(1..numberLocations)]))
             | q353 : int(1..numberLocations)]),
    plan_setLiftSingle_sequenceRotateRight_activation ->
    and([q6 <=
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
             [plan_setLiftSingle_sequenceRotateRight_conjure_aux79]
         ->
         and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                  [plan_setLiftSingle_sequenceRotateRight_conjure_aux80, q6]
              =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
                  [plan_setLiftSingle_sequenceRotateRight_conjure_aux79,
                   (q6 - 1 + plan_setLiftSingle_sequenceRotateRight_size) %
                   (incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                        [plan_setLiftSingle_sequenceRotateRight_conjure_aux79]
                    - 1)
                   + 1],
              q6 <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceRotateRight_conjure_aux80],
              (q6 - 1 + plan_setLiftSingle_sequenceRotateRight_size) %
              (incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                   [plan_setLiftSingle_sequenceRotateRight_conjure_aux79]
               - 1)
              + 1
              <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setLiftSingle_sequenceRotateRight_conjure_aux79];
                  int(1..3)])
             | q6 : int(1..numberLocations)]),
    plan_setLiftSingle_sequenceRotateRight_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setLiftSingle_sequenceRotateRight_activation ->
    plan_setLiftSingle_sequenceRotateRight_conjure_aux80 = plan_setLiftSingle_sequenceRotateRight_conjure_aux79,
    plan_setLiftSingle_sequenceRotateRight_activation ->
    plan_setLiftSingle_sequenceRotateRight_conjure_aux79 = plan_setLiftSingle_sequenceRotateRight_conjure_aux80,
    plan_setLiftSingle_sequenceRotateRight_activation -> true,
    !plan_setLiftSingle_sequenceRotateRight_activation ->
    and([plan_setLiftSingle_sequenceRotateRight_size = 1, plan_setLiftSingle_sequenceRotateRight_conjure_aux79 = 1,
         plan_setLiftSingle_sequenceRotateRight_conjure_aux80 = 1;
             int(1..3)]),
    plan_setRemoveSingle_activation ->
    allDiff([plan_setRemoveSingle_conjure_aux81, plan_setRemoveSingle_conjure_aux82; int(1..2)]),
    plan_setRemoveSingle_activation ->
    plan_setRemoveSingle_conjure_aux81 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
    plan_setRemoveSingle_conjure_aux82 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setRemoveSingle_activation -> allDiff([plan_setRemoveSingle_conjure_aux83; int(1)]),
    plan_setRemoveSingle_activation -> plan_setRemoveSingle_conjure_aux83 <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_setRemoveSingle_activation ->
    and([q373 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker /\
         !(q373 = plan_setRemoveSingle_conjure_aux81 \/ q373 = plan_setRemoveSingle_conjure_aux82)
         ->
         and([q379 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q373] ->
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q373, q379] =
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q373, q379]
              /\ q379 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q373]
                  | q379 : int(1..numberLocations)])
         /\
         and([q380 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q373] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q373, q380] =
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q373, q380]
              /\ q380 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q373]
                  | q380 : int(1..numberLocations)])
         /\
         (and([q382 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q373] ->
               or([q384 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q373] /\
                   q384 = q382
                       | q384 : int(1..numberLocations)])
                   | q382 : int(1..numberLocations)])
          /\
          and([q386 <= incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q373] ->
               or([q388 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q373] /\ q388 = q386
                       | q388 : int(1..numberLocations)])
                   | q386 : int(1..numberLocations)]))
             | q373 : int(1..numberLocations)]),
    plan_setRemoveSingle_activation ->
    and([q390 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setRemoveSingle_conjure_aux83] ->
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
             [plan_setRemoveSingle_conjure_aux81, q390]
         = plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[plan_setRemoveSingle_conjure_aux83, q390]
         /\
         q390 <=
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setRemoveSingle_conjure_aux81]
             | q390 : int(1..numberLocations)])
    /\
    and([q391 <=
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setRemoveSingle_conjure_aux81]
         ->
         plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[plan_setRemoveSingle_conjure_aux83, q391] =
         incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values
             [plan_setRemoveSingle_conjure_aux81, q391]
         /\ q391 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setRemoveSingle_conjure_aux83]
             | q391 : int(1..numberLocations)])
    /\
    (and([q393 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setRemoveSingle_conjure_aux83] ->
          or([q395 <=
              incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length
                  [plan_setRemoveSingle_conjure_aux81]
              /\ q395 = q393
                  | q395 : int(1..numberLocations)])
              | q393 : int(1..numberLocations)])
     /\
     and([q397 <=
          incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setRemoveSingle_conjure_aux81]
          ->
          or([q399 <=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setRemoveSingle_conjure_aux83]
              /\ q399 = q397
                  | q399 : int(1..numberLocations)])
              | q397 : int(1..numberLocations)]))
    /\
    incumbent_plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[plan_setRemoveSingle_conjure_aux82] =
    plan_setRemoveSingle_size,
    plan_setRemoveSingle_activation ->
    plan_ExplicitVarSizeWithMarkerR14_Marker = incumbent_plan_ExplicitVarSizeWithMarkerR14_Marker + -1,
    plan_setRemoveSingle_activation ->
    plan_setRemoveSingle_conjure_aux81 = plan_setRemoveSingle_conjure_aux83 \/
    plan_setRemoveSingle_conjure_aux82 = plan_setRemoveSingle_conjure_aux83,
    plan_setRemoveSingle_activation -> true,
    !plan_setRemoveSingle_activation ->
    and([plan_setRemoveSingle_size = 1, plan_setRemoveSingle_conjure_aux81 = 1, plan_setRemoveSingle_conjure_aux82 = 1,
         plan_setRemoveSingle_conjure_aux83 = 1;
             int(1..4)]),
    and([and([q19 <= plan_ExplicitVarSizeWithMarkerR14_Marker ->
              or([q27 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q18] /\
                  !(plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q19, q27] =
                    plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q18, q27]
                    /\ q27 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q19])
                      | q27 : int(1..numberLocations)])
              \/
              or([q28 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q19] /\
                  !(plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q18, q28] =
                    plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q19, q28]
                    /\ q28 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q18])
                      | q28 : int(1..numberLocations)])
                  | q19 : int(q18 + 1..numberLocations)])
             | q18 : int(1..numberLocations)]),
    and([q20 > plan_ExplicitVarSizeWithMarkerR14_Marker ->
         plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q20] = 0 /\
         and([plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q20, q29] = 1
                  | q29 : int(1..numberLocations)])
             | q20 : int(1..numberLocations)]),
    minVehicles <= plan_ExplicitVarSizeWithMarkerR14_Marker,
    plan_ExplicitVarSizeWithMarkerR14_Marker <= numberLocations,
    and([q21 <= plan_ExplicitVarSizeWithMarkerR14_Marker ->
         and([q22 > plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q21] ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q21, q22] = 1
                  | q22 : int(1..numberLocations)])
             | q21 : int(1..numberLocations)]),
    and([q21 <= plan_ExplicitVarSizeWithMarkerR14_Marker ->
         1 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q21]
             | q21 : int(1..numberLocations)]),
    and([q21 <= plan_ExplicitVarSizeWithMarkerR14_Marker ->
         plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q21] <= numberLocations
             | q21 : int(1..numberLocations)]),
    and([q21 <= plan_ExplicitVarSizeWithMarkerR14_Marker ->
         and([q23 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q21] /\
              q24 <= plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Length[q21]
              ->
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q21, q23] !=
              plan_ExplicitVarSizeWithMarkerR14_Values_ExplicitBounded_Values[q21, q24]
                  | q23 : int(1..numberLocations), q24 : int(1..numberLocations), q23 < q24])
             | q21 : int(1..numberLocations)])

$ Conjure's
$ {"finds": [{"Name": "plan"}],
$  "givens": [{"Name": "numberLocations"}, {"Name": "orderWeights"}, {"Name": "costs"}, {"Name": "vehicleCapacity"}],
$  "enumGivens": [],
$  "enumLettings": [],
$  "lettings": [[{"Name": "locDomain"},
$                {"Domain": {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                            {"Reference": [{"Name": "numberLocations"},
$                                                                           {"DeclNoRepr": ["Given",
$                                                                                           {"Name": "numberLocations"},
$                                                                                           {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]},
$                                                                                           {"NoRegion": []}]}]}]}]}}],
$               [{"Name": "plannedLocDomain"},
$                {"Domain": {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                            {"Reference": [{"Name": "numberLocations"},
$                                                                           {"DeclNoRepr": ["Given",
$                                                                                           {"Name": "numberLocations"},
$                                                                                           {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]},
$                                                                                           {"NoRegion": []}]}]}]}]}}],
$               [{"Name": "totalOrderWeight"},
$                {"Op": {"MkOpSum": {"Comprehension": [{"Reference": [{"Name": "weight"},
$                                                                     {"InComprehension": {"GenInExpr": [{"AbsPatTuple": [{"Single": {"Name": "_"}},
$                                                                                                                         {"Single": {"Name": "weight"}}]},
$                                                                                                        {"Reference": [{"Name": "orderWeights"},
$                                                                                                                       {"DeclNoRepr": ["Given",
$                                                                                                                                       {"Name": "orderWeights"},
$                                                                                                                                       {"DomainFunction": [[],
$                                                                                                                                                           [{"SizeAttr_Size": {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                              1,
$                                                                                                                                                                                                              []]},
$                                                                                                                                                                                             {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                             {"MachineName": ["fin",
$                                                                                                                                                                                                                              1,
$                                                                                                                                                                                                                              []]},
$                                                                                                                                                                                                             {"DomainInt": []},
$                                                                                                                                                                                                             {"NoRegion": []}]}]}},
$                                                                                                                                                            "PartialityAttr_Total",
$                                                                                                                                                            "JectivityAttr_None"],
$                                                                                                                                                           {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                            {"Reference": [{"Name": "numberLocations"},
$                                                                                                                                                                                                           {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                           {"Name": "numberLocations"},
$                                                                                                                                                                                                                           {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]},
$                                                                                                                                                                                                                           {"NoRegion": []}]}]}]}]},
$                                                                                                                                                           {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                            {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                            2,
$                                                                                                                                                                                                                            []]},
$                                                                                                                                                                                                           {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                           {"MachineName": ["fin",
$                                                                                                                                                                                                                                            2,
$                                                                                                                                                                                                                                            []]},
$                                                                                                                                                                                                                           {"DomainInt": []},
$                                                                                                                                                                                                                           {"NoRegion": []}]}]}]}]}]},
$                                                                                                                                       {"NoRegion": []}]}]}]}}]},
$                                                      [{"Generator": {"GenInExpr": [{"AbsPatTuple": [{"Single": {"Name": "_"}},
$                                                                                                     {"Single": {"Name": "weight"}}]},
$                                                                                    {"Reference": [{"Name": "orderWeights"},
$                                                                                                   {"DeclNoRepr": ["Given",
$                                                                                                                   {"Name": "orderWeights"},
$                                                                                                                   {"DomainFunction": [[],
$                                                                                                                                       [{"SizeAttr_Size": {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                          1,
$                                                                                                                                                                                          []]},
$                                                                                                                                                                         {"DeclNoRepr": ["Given",
$                                                                                                                                                                                         {"MachineName": ["fin",
$                                                                                                                                                                                                          1,
$                                                                                                                                                                                                          []]},
$                                                                                                                                                                                         {"DomainInt": []},
$                                                                                                                                                                                         {"NoRegion": []}]}]}},
$                                                                                                                                        "PartialityAttr_Total",
$                                                                                                                                        "JectivityAttr_None"],
$                                                                                                                                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                        {"Reference": [{"Name": "numberLocations"},
$                                                                                                                                                                                       {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                       {"Name": "numberLocations"},
$                                                                                                                                                                                                       {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]},
$                                                                                                                                                                                                       {"NoRegion": []}]}]}]}]},
$                                                                                                                                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                        {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                        2,
$                                                                                                                                                                                                        []]},
$                                                                                                                                                                                       {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                       {"MachineName": ["fin",
$                                                                                                                                                                                                                        2,
$                                                                                                                                                                                                                        []]},
$                                                                                                                                                                                                       {"DomainInt": []},
$                                                                                                                                                                                                       {"NoRegion": []}]}]}]}]}]},
$                                                                                                                   {"NoRegion": []}]}]}]}}]]}}}],
$               [{"Name": "minVehicles"},
$                {"Op": {"MkOpSum": {"AbstractLiteral": {"AbsLitMatrix": [{"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                          {"Constant": {"ConstantInt": 2}}]}]},
$                                                                         [{"Op": {"MkOpDiv": [{"Reference": [{"Name": "totalOrderWeight"},
$                                                                                                             {"Alias": {"Op": {"MkOpSum": {"Comprehension": [{"Reference": [{"Name": "weight"},
$                                                                                                                                                                            {"InComprehension": {"GenInExpr": [{"AbsPatTuple": [{"Single": {"Name": "_"}},
$                                                                                                                                                                                                                                {"Single": {"Name": "weight"}}]},
$                                                                                                                                                                                                               {"Reference": [{"Name": "orderWeights"},
$                                                                                                                                                                                                                              {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                              {"Name": "orderWeights"},
$                                                                                                                                                                                                                                              {"DomainFunction": [[],
$                                                                                                                                                                                                                                                                  [{"SizeAttr_Size": {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                     1,
$                                                                                                                                                                                                                                                                                                                     []]},
$                                                                                                                                                                                                                                                                                                    {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                    {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                     1,
$                                                                                                                                                                                                                                                                                                                                     []]},
$                                                                                                                                                                                                                                                                                                                    {"DomainInt": []},
$                                                                                                                                                                                                                                                                                                                    {"NoRegion": []}]}]}},
$                                                                                                                                                                                                                                                                   "PartialityAttr_Total",
$                                                                                                                                                                                                                                                                   "JectivityAttr_None"],
$                                                                                                                                                                                                                                                                  {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                                                   {"Reference": [{"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                                  {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                  {"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                                                  {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]},
$                                                                                                                                                                                                                                                                                                                                  {"NoRegion": []}]}]}]}]},
$                                                                                                                                                                                                                                                                  {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                                                   {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                   2,
$                                                                                                                                                                                                                                                                                                                                   []]},
$                                                                                                                                                                                                                                                                                                                  {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                  {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                   2,
$                                                                                                                                                                                                                                                                                                                                                   []]},
$                                                                                                                                                                                                                                                                                                                                  {"DomainInt": []},
$                                                                                                                                                                                                                                                                                                                                  {"NoRegion": []}]}]}]}]}]},
$                                                                                                                                                                                                                                              {"NoRegion": []}]}]}]}}]},
$                                                                                                                                                             [{"Generator": {"GenInExpr": [{"AbsPatTuple": [{"Single": {"Name": "_"}},
$                                                                                                                                                                                                            {"Single": {"Name": "weight"}}]},
$                                                                                                                                                                                           {"Reference": [{"Name": "orderWeights"},
$                                                                                                                                                                                                          {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                          {"Name": "orderWeights"},
$                                                                                                                                                                                                                          {"DomainFunction": [[],
$                                                                                                                                                                                                                                              [{"SizeAttr_Size": {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                 1,
$                                                                                                                                                                                                                                                                                                 []]},
$                                                                                                                                                                                                                                                                                {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                                                                                {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                 1,
$                                                                                                                                                                                                                                                                                                                 []]},
$                                                                                                                                                                                                                                                                                                {"DomainInt": []},
$                                                                                                                                                                                                                                                                                                {"NoRegion": []}]}]}},
$                                                                                                                                                                                                                                               "PartialityAttr_Total",
$                                                                                                                                                                                                                                               "JectivityAttr_None"],
$                                                                                                                                                                                                                                              {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                               {"Reference": [{"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                              {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                                                                                              {"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                              {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]},
$                                                                                                                                                                                                                                                                                                              {"NoRegion": []}]}]}]}]},
$                                                                                                                                                                                                                                              {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                               {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                               2,
$                                                                                                                                                                                                                                                                                                               []]},
$                                                                                                                                                                                                                                                                                              {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                                                                                              {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                               2,
$                                                                                                                                                                                                                                                                                                                               []]},
$                                                                                                                                                                                                                                                                                                              {"DomainInt": []},
$                                                                                                                                                                                                                                                                                                              {"NoRegion": []}]}]}]}]}]},
$                                                                                                                                                                                                                          {"NoRegion": []}]}]}]}}]]}}}}]},
$                                                                                              {"Reference": [{"Name": "vehicleCapacity"},
$                                                                                                             {"DeclNoRepr": ["Given",
$                                                                                                                             {"Name": "vehicleCapacity"},
$                                                                                                                             {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]},
$                                                                                                                             {"NoRegion": []}]}]}]}},
$                                                                          {"Op": {"MkOpToInt": {"Op": {"MkOpNeq": [{"Op": {"MkOpMod": [{"Reference": [{"Name": "totalOrderWeight"},
$                                                                                                                                                      {"Alias": {"Op": {"MkOpSum": {"Comprehension": [{"Reference": [{"Name": "weight"},
$                                                                                                                                                                                                                     {"InComprehension": {"GenInExpr": [{"AbsPatTuple": [{"Single": {"Name": "_"}},
$                                                                                                                                                                                                                                                                         {"Single": {"Name": "weight"}}]},
$                                                                                                                                                                                                                                                        {"Reference": [{"Name": "orderWeights"},
$                                                                                                                                                                                                                                                                       {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                                                                       {"Name": "orderWeights"},
$                                                                                                                                                                                                                                                                                       {"DomainFunction": [[],
$                                                                                                                                                                                                                                                                                                           [{"SizeAttr_Size": {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                              1,
$                                                                                                                                                                                                                                                                                                                                                              []]},
$                                                                                                                                                                                                                                                                                                                                             {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                             {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                              1,
$                                                                                                                                                                                                                                                                                                                                                                              []]},
$                                                                                                                                                                                                                                                                                                                                                             {"DomainInt": []},
$                                                                                                                                                                                                                                                                                                                                                             {"NoRegion": []}]}]}},
$                                                                                                                                                                                                                                                                                                            "PartialityAttr_Total",
$                                                                                                                                                                                                                                                                                                            "JectivityAttr_None"],
$                                                                                                                                                                                                                                                                                                           {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                                                                                            {"Reference": [{"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                                                                           {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                           {"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                                                                                           {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]},
$                                                                                                                                                                                                                                                                                                                                                                           {"NoRegion": []}]}]}]}]},
$                                                                                                                                                                                                                                                                                                           {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                                                                                            {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                            2,
$                                                                                                                                                                                                                                                                                                                                                                            []]},
$                                                                                                                                                                                                                                                                                                                                                           {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                           {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                            2,
$                                                                                                                                                                                                                                                                                                                                                                                            []]},
$                                                                                                                                                                                                                                                                                                                                                                           {"DomainInt": []},
$                                                                                                                                                                                                                                                                                                                                                                           {"NoRegion": []}]}]}]}]}]},
$                                                                                                                                                                                                                                                                                       {"NoRegion": []}]}]}]}}]},
$                                                                                                                                                                                                      [{"Generator": {"GenInExpr": [{"AbsPatTuple": [{"Single": {"Name": "_"}},
$                                                                                                                                                                                                                                                     {"Single": {"Name": "weight"}}]},
$                                                                                                                                                                                                                                    {"Reference": [{"Name": "orderWeights"},
$                                                                                                                                                                                                                                                   {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                                                   {"Name": "orderWeights"},
$                                                                                                                                                                                                                                                                   {"DomainFunction": [[],
$                                                                                                                                                                                                                                                                                       [{"SizeAttr_Size": {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                          1,
$                                                                                                                                                                                                                                                                                                                                          []]},
$                                                                                                                                                                                                                                                                                                                         {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                         {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                          1,
$                                                                                                                                                                                                                                                                                                                                                          []]},
$                                                                                                                                                                                                                                                                                                                                         {"DomainInt": []},
$                                                                                                                                                                                                                                                                                                                                         {"NoRegion": []}]}]}},
$                                                                                                                                                                                                                                                                                        "PartialityAttr_Total",
$                                                                                                                                                                                                                                                                                        "JectivityAttr_None"],
$                                                                                                                                                                                                                                                                                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                                                                        {"Reference": [{"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                                                       {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                       {"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                                                                       {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]},
$                                                                                                                                                                                                                                                                                                                                                       {"NoRegion": []}]}]}]}]},
$                                                                                                                                                                                                                                                                                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                                                                        {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                        2,
$                                                                                                                                                                                                                                                                                                                                                        []]},
$                                                                                                                                                                                                                                                                                                                                       {"DeclNoRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                       {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                        2,
$                                                                                                                                                                                                                                                                                                                                                                        []]},
$                                                                                                                                                                                                                                                                                                                                                       {"DomainInt": []},
$                                                                                                                                                                                                                                                                                                                                                       {"NoRegion": []}]}]}]}]}]},
$                                                                                                                                                                                                                                                                   {"NoRegion": []}]}]}]}}]]}}}}]},
$                                                                                                                                       {"Reference": [{"Name": "vehicleCapacity"},
$                                                                                                                                                      {"DeclNoRepr": ["Given",
$                                                                                                                                                                      {"Name": "vehicleCapacity"},
$                                                                                                                                                                      {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]},
$                                                                                                                                                                      {"NoRegion": []}]}]}]}},
$                                                                                                                   {"Constant": {"ConstantInt": 0}}]}}}}]]}}}}]],
$  "unnameds": [],
$  "strategyQ": {"PickFirst": []},
$  "strategyA": {"Compact": []},
$  "trailCompact": [[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 2], [1, 1, 2], [1, 1, 1], [1, 1, 2], [1, 1, 2],
$                   [1, 1, 1], [1, 1, 2], [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 2], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 2], [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 2], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 2],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 2], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2],
$                   [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2],
$                   [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2],
$                   [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 2], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 2], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 2], [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 2],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$                   [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]],
$  "trailVerbose": [],
$  "trailRewrites": [],
$  "nameGenState": [["conjure_aux", 84], ["fin", 5], ["q", 402]],
$  "nbExtraGivens": 4,
$  "representations": [[{"MachineName": ["fin", 1, []]}, {"DomainInt": []}],
$                      [{"Name": "numberLocations"},
$                       {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}],
$                      [{"MachineName": ["fin", 2, []]}, {"DomainInt": []}],
$                      [{"MachineName": ["fin", 3, []]}, {"DomainInt": []}],
$                      [{"MachineName": ["fin", 4, []]}, {"DomainInt": []}],
$                      [{"Name": "orderWeights"},
$                       {"DomainFunction": [{"Function_1D": []},
$                                           [{"SizeAttr_Size": {"Reference": [{"MachineName": ["fin", 1, []]},
$                                                                             {"DeclHasRepr": ["Given",
$                                                                                              {"MachineName": ["fin", 1,
$                                                                                                               []]},
$                                                                                              {"DomainInt": []}]}]}},
$                                            "PartialityAttr_Total", "JectivityAttr_None"],
$                                           {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                            {"Reference": [{"Name": "numberLocations"},
$                                                                                           {"DeclHasRepr": ["Given",
$                                                                                                            {"Name": "numberLocations"},
$                                                                                                            {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]},
$                                           {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                            {"Reference": [{"MachineName": ["fin", 2,
$                                                                                                            []]},
$                                                                                           {"DeclHasRepr": ["Given",
$                                                                                                            {"MachineName": ["fin",
$                                                                                                                             2,
$                                                                                                                             []]},
$                                                                                                            {"DomainInt": []}]}]}]}]}]}],
$                      [{"Name": "vehicleCapacity"},
$                       {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}],
$                      [{"Name": "costs"},
$                       {"DomainFunction": [{"Function_ND": []},
$                                           [{"SizeAttr_Size": {"Reference": [{"MachineName": ["fin", 3, []]},
$                                                                             {"DeclHasRepr": ["Given",
$                                                                                              {"MachineName": ["fin", 3,
$                                                                                                               []]},
$                                                                                              {"DomainInt": []}]}]}},
$                                            "PartialityAttr_Total", "JectivityAttr_None"],
$                                           {"DomainTuple": [{"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                                             {"Reference": [{"Name": "numberLocations"},
$                                                                                                            {"DeclHasRepr": ["Given",
$                                                                                                                             {"Name": "numberLocations"},
$                                                                                                                             {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]},
$                                                            {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                                             {"Reference": [{"Name": "numberLocations"},
$                                                                                                            {"DeclHasRepr": ["Given",
$                                                                                                                             {"Name": "numberLocations"},
$                                                                                                                             {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]}]},
$                                           {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                            {"Reference": [{"MachineName": ["fin", 4,
$                                                                                                            []]},
$                                                                                           {"DeclHasRepr": ["Given",
$                                                                                                            {"MachineName": ["fin",
$                                                                                                                             4,
$                                                                                                                             []]},
$                                                                                                            {"DomainInt": []}]}]}]}]}]}],
$                      [{"Name": "plan"},
$                       {"DomainSet": [{"Set_ExplicitVarSizeWithMarker": []},
$                                      {"SizeAttr_MinMaxSize": [{"Reference": [{"Name": "minVehicles"},
$                                                                              {"Alias": {"Op": {"MkOpSum": {"AbstractLiteral": {"AbsLitMatrix": [{"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                  {"Constant": {"ConstantInt": 2}}]}]},
$                                                                                                                                                 [{"Op": {"MkOpDiv": [{"Reference": [{"Name": "totalOrderWeight"},
$                                                                                                                                                                                     {"Alias": {"Op": {"MkOpSum": {"Comprehension": [{"Reference": [{"Name": "weight"},
$                                                                                                                                                                                                                                                    {"InComprehension": {"GenInExpr": [{"AbsPatTuple": [{"Single": {"Name": "_"}},
$                                                                                                                                                                                                                                                                                                        {"Single": {"Name": "weight"}}]},
$                                                                                                                                                                                                                                                                                       {"Reference": [{"Name": "orderWeights"},
$                                                                                                                                                                                                                                                                                                      {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                       {"Name": "orderWeights"},
$                                                                                                                                                                                                                                                                                                                       {"DomainFunction": [{"Function_1D": []},
$                                                                                                                                                                                                                                                                                                                                           [{"SizeAttr_Size": {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                              1,
$                                                                                                                                                                                                                                                                                                                                                                                              []]},
$                                                                                                                                                                                                                                                                                                                                                                             {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                                              {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                                               1,
$                                                                                                                                                                                                                                                                                                                                                                                                               []]},
$                                                                                                                                                                                                                                                                                                                                                                                              {"DomainInt": []}]}]}},
$                                                                                                                                                                                                                                                                                                                                            "PartialityAttr_Total",
$                                                                                                                                                                                                                                                                                                                                            "JectivityAttr_None"],
$                                                                                                                                                                                                                                                                                                                                           {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                                                                                                                            {"Reference": [{"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                                                                                                           {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                                                            {"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                                                                                                                            {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]},
$                                                                                                                                                                                                                                                                                                                                           {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                                                                                                                            {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                                            2,
$                                                                                                                                                                                                                                                                                                                                                                                                            []]},
$                                                                                                                                                                                                                                                                                                                                                                                           {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                                                            {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                                                             2,
$                                                                                                                                                                                                                                                                                                                                                                                                                             []]},
$                                                                                                                                                                                                                                                                                                                                                                                                            {"DomainInt": []}]}]}]}]}]}]}]}]}}]},
$                                                                                                                                                                                                                                     [{"Generator": {"GenInExpr": [{"AbsPatTuple": [{"Single": {"Name": "_"}},
$                                                                                                                                                                                                                                                                                    {"Single": {"Name": "weight"}}]},
$                                                                                                                                                                                                                                                                   {"Reference": [{"Name": "orderWeights"},
$                                                                                                                                                                                                                                                                                  {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                   {"Name": "orderWeights"},
$                                                                                                                                                                                                                                                                                                   {"DomainFunction": [{"Function_1D": []},
$                                                                                                                                                                                                                                                                                                                       [{"SizeAttr_Size": {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                          1,
$                                                                                                                                                                                                                                                                                                                                                                          []]},
$                                                                                                                                                                                                                                                                                                                                                         {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                          {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                           1,
$                                                                                                                                                                                                                                                                                                                                                                                           []]},
$                                                                                                                                                                                                                                                                                                                                                                          {"DomainInt": []}]}]}},
$                                                                                                                                                                                                                                                                                                                        "PartialityAttr_Total",
$                                                                                                                                                                                                                                                                                                                        "JectivityAttr_None"],
$                                                                                                                                                                                                                                                                                                                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                                                                                                        {"Reference": [{"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                                                                                       {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                                        {"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                                                                                                        {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]},
$                                                                                                                                                                                                                                                                                                                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                                                                                                        {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                        2,
$                                                                                                                                                                                                                                                                                                                                                                                        []]},
$                                                                                                                                                                                                                                                                                                                                                                       {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                                        {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                                         2,
$                                                                                                                                                                                                                                                                                                                                                                                                         []]},
$                                                                                                                                                                                                                                                                                                                                                                                        {"DomainInt": []}]}]}]}]}]}]}]}]}}]]}}}}]},
$                                                                                                                                                                      {"Reference": [{"Name": "vehicleCapacity"},
$                                                                                                                                                                                     {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                      {"Name": "vehicleCapacity"},
$                                                                                                                                                                                                      {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}},
$                                                                                                                                                  {"Op": {"MkOpToInt": {"Op": {"MkOpNeq": [{"Op": {"MkOpMod": [{"Reference": [{"Name": "totalOrderWeight"},
$                                                                                                                                                                                                                              {"Alias": {"Op": {"MkOpSum": {"Comprehension": [{"Reference": [{"Name": "weight"},
$                                                                                                                                                                                                                                                                                             {"InComprehension": {"GenInExpr": [{"AbsPatTuple": [{"Single": {"Name": "_"}},
$                                                                                                                                                                                                                                                                                                                                                 {"Single": {"Name": "weight"}}]},
$                                                                                                                                                                                                                                                                                                                                {"Reference": [{"Name": "orderWeights"},
$                                                                                                                                                                                                                                                                                                                                               {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                {"Name": "orderWeights"},
$                                                                                                                                                                                                                                                                                                                                                                {"DomainFunction": [{"Function_1D": []},
$                                                                                                                                                                                                                                                                                                                                                                                    [{"SizeAttr_Size": {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                                                                       1,
$                                                                                                                                                                                                                                                                                                                                                                                                                                       []]},
$                                                                                                                                                                                                                                                                                                                                                                                                                      {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                                                                                       {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                                                                                        1,
$                                                                                                                                                                                                                                                                                                                                                                                                                                                        []]},
$                                                                                                                                                                                                                                                                                                                                                                                                                                       {"DomainInt": []}]}]}},
$                                                                                                                                                                                                                                                                                                                                                                                     "PartialityAttr_Total",
$                                                                                                                                                                                                                                                                                                                                                                                     "JectivityAttr_None"],
$                                                                                                                                                                                                                                                                                                                                                                                    {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                                                                                                                                                                     {"Reference": [{"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                                                                                                                                                    {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                                                                                                     {"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                                                                                                                                                                     {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]},
$                                                                                                                                                                                                                                                                                                                                                                                    {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                                                                                                                                                                     {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                                                                                     2,
$                                                                                                                                                                                                                                                                                                                                                                                                                                                     []]},
$                                                                                                                                                                                                                                                                                                                                                                                                                                    {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                                                                                                     {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                                                                                                      2,
$                                                                                                                                                                                                                                                                                                                                                                                                                                                                      []]},
$                                                                                                                                                                                                                                                                                                                                                                                                                                                     {"DomainInt": []}]}]}]}]}]}]}]}]}}]},
$                                                                                                                                                                                                                                                                              [{"Generator": {"GenInExpr": [{"AbsPatTuple": [{"Single": {"Name": "_"}},
$                                                                                                                                                                                                                                                                                                                             {"Single": {"Name": "weight"}}]},
$                                                                                                                                                                                                                                                                                                            {"Reference": [{"Name": "orderWeights"},
$                                                                                                                                                                                                                                                                                                                           {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                            {"Name": "orderWeights"},
$                                                                                                                                                                                                                                                                                                                                            {"DomainFunction": [{"Function_1D": []},
$                                                                                                                                                                                                                                                                                                                                                                [{"SizeAttr_Size": {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                                                   1,
$                                                                                                                                                                                                                                                                                                                                                                                                                   []]},
$                                                                                                                                                                                                                                                                                                                                                                                                  {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                                                                   {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                                                                    1,
$                                                                                                                                                                                                                                                                                                                                                                                                                                    []]},
$                                                                                                                                                                                                                                                                                                                                                                                                                   {"DomainInt": []}]}]}},
$                                                                                                                                                                                                                                                                                                                                                                 "PartialityAttr_Total",
$                                                                                                                                                                                                                                                                                                                                                                 "JectivityAttr_None"],
$                                                                                                                                                                                                                                                                                                                                                                {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                                                                                                                                                 {"Reference": [{"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                                                                                                                                {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                                                                                 {"Name": "numberLocations"},
$                                                                                                                                                                                                                                                                                                                                                                                                                                 {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]},
$                                                                                                                                                                                                                                                                                                                                                                {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                                                                                                                                                                                                                                                                                                                                 {"Reference": [{"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                                                                 2,
$                                                                                                                                                                                                                                                                                                                                                                                                                                 []]},
$                                                                                                                                                                                                                                                                                                                                                                                                                {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                                                                                                                                                                                                                 {"MachineName": ["fin",
$                                                                                                                                                                                                                                                                                                                                                                                                                                                  2,
$                                                                                                                                                                                                                                                                                                                                                                                                                                                  []]},
$                                                                                                                                                                                                                                                                                                                                                                                                                                 {"DomainInt": []}]}]}]}]}]}]}]}]}}]]}}}}]},
$                                                                                                                                                                                                               {"Reference": [{"Name": "vehicleCapacity"},
$                                                                                                                                                                                                                              {"DeclHasRepr": ["Given",
$                                                                                                                                                                                                                                               {"Name": "vehicleCapacity"},
$                                                                                                                                                                                                                                               {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}},
$                                                                                                                                                                                           {"Constant": {"ConstantInt": 0}}]}}}}]]}}}}}]},
$                                                               {"Reference": [{"Name": "numberLocations"},
$                                                                              {"DeclHasRepr": ["Given",
$                                                                                               {"Name": "numberLocations"},
$                                                                                               {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]},
$                                      {"DomainSequence": [{"Sequence_ExplicitBounded": []},
$                                                          [{"SizeAttr_MinMaxSize": [{"Constant": {"ConstantInt": 1}},
$                                                                                    {"Reference": [{"Name": "numberLocations"},
$                                                                                                   {"DeclHasRepr": ["Given",
$                                                                                                                    {"Name": "numberLocations"},
$                                                                                                                    {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]},
$                                                           "JectivityAttr_Injective"],
$                                                          {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                           {"Reference": [{"Name": "numberLocations"},
$                                                                                                          {"DeclHasRepr": ["Given",
$                                                                                                                           {"Name": "numberLocations"},
$                                                                                                                           {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]}]}]}],
$                      [{"Name": "size"},
$                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                        {"Reference": [{"Name": "numberLocations"},
$                                                                       {"DeclHasRepr": ["Given",
$                                                                                        {"Name": "numberLocations"},
$                                                                                        {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]}],
$                      [{"MachineName": ["conjure_aux", 9, []]},
$                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                        {"Reference": [{"Name": "numberLocations"},
$                                                                       {"DeclHasRepr": ["Given",
$                                                                                        {"Name": "numberLocations"},
$                                                                                        {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]}],
$                      [{"MachineName": ["conjure_aux", 8, []]},
$                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                        {"Reference": [{"Name": "numberLocations"},
$                                                                       {"DeclHasRepr": ["Given",
$                                                                                        {"Name": "numberLocations"},
$                                                                                        {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]}],
$                      [{"MachineName": ["conjure_aux", 6, []]},
$                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                        {"Reference": [{"Name": "numberLocations"},
$                                                                       {"DeclHasRepr": ["Given",
$                                                                                        {"Name": "numberLocations"},
$                                                                                        {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]}],
$                      [{"MachineName": ["conjure_aux", 5, []]},
$                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                        {"Reference": [{"Name": "numberLocations"},
$                                                                       {"DeclHasRepr": ["Given",
$                                                                                        {"Name": "numberLocations"},
$                                                                                        {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]}],
$                      [{"MachineName": ["conjure_aux", 7, []]},
$                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                        {"Reference": [{"Name": "numberLocations"},
$                                                                       {"DeclHasRepr": ["Given",
$                                                                                        {"Name": "numberLocations"},
$                                                                                        {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]}],
$                      [{"MachineName": ["conjure_aux", 4, []]},
$                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                        {"Reference": [{"Name": "numberLocations"},
$                                                                       {"DeclHasRepr": ["Given",
$                                                                                        {"Name": "numberLocations"},
$                                                                                        {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]}],
$                      [{"MachineName": ["conjure_aux", 3, []]},
$                       {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                        {"Reference": [{"Name": "numberLocations"},
$                                                                       {"DeclHasRepr": ["Given",
$                                                                                        {"Name": "numberLocations"},
$                                                                                        {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}]}]}]}]],
$  "representationsTree": [[{"MachineName": ["conjure_aux", 3, []]},
$                           [{"rootLabel": null,
$                             "subForest": []}]],
$                          [{"MachineName": ["conjure_aux", 4, []]},
$                           [{"rootLabel": null,
$                             "subForest": []}]],
$                          [{"MachineName": ["conjure_aux", 5, []]},
$                           [{"rootLabel": null,
$                             "subForest": []}]],
$                          [{"MachineName": ["conjure_aux", 6, []]},
$                           [{"rootLabel": null,
$                             "subForest": []}]],
$                          [{"MachineName": ["conjure_aux", 7, []]},
$                           [{"rootLabel": null,
$                             "subForest": []}]],
$                          [{"MachineName": ["conjure_aux", 8, []]},
$                           [{"rootLabel": null,
$                             "subForest": []}]],
$                          [{"MachineName": ["conjure_aux", 9, []]},
$                           [{"rootLabel": null,
$                             "subForest": []}]],
$                          [{"Name": "costs"},
$                           [{"rootLabel": {"Function_ND": []},
$                             "subForest": [{"rootLabel": null,
$                                            "subForest": [{"rootLabel": null,
$                                                           "subForest": []},
$                                                          {"rootLabel": null,
$                                                           "subForest": []}]},
$                                           {"rootLabel": null,
$                                            "subForest": []}]}]],
$                          [{"MachineName": ["fin", 1, []]},
$                           [{"rootLabel": null,
$                             "subForest": []}]],
$                          [{"MachineName": ["fin", 2, []]},
$                           [{"rootLabel": null,
$                             "subForest": []}]],
$                          [{"MachineName": ["fin", 3, []]},
$                           [{"rootLabel": null,
$                             "subForest": []}]],
$                          [{"MachineName": ["fin", 4, []]},
$                           [{"rootLabel": null,
$                             "subForest": []}]],
$                          [{"Name": "numberLocations"},
$                           [{"rootLabel": null,
$                             "subForest": []}]],
$                          [{"Name": "orderWeights"},
$                           [{"rootLabel": {"Function_1D": []},
$                             "subForest": [{"rootLabel": null,
$                                            "subForest": []},
$                                           {"rootLabel": null,
$                                            "subForest": []}]}]],
$                          [{"Name": "plan"},
$                           [{"rootLabel": {"Set_ExplicitVarSizeWithMarker": []},
$                             "subForest": [{"rootLabel": {"Sequence_ExplicitBounded": []},
$                                            "subForest": [{"rootLabel": null,
$                                                           "subForest": []}]}]}]],
$                          [{"Name": "size"},
$                           [{"rootLabel": null,
$                             "subForest": []}]],
$                          [{"Name": "vehicleCapacity"},
$                           [{"rootLabel": null,
$                             "subForest": []}]]],
$  "originalDomains": [[{"Name": "numberLocations"},
$                       {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}],
$                      [{"Name": "orderWeights"},
$                       {"DomainFunction": [[], [{"SizeAttr_None": []}, "PartialityAttr_Total", "JectivityAttr_None"],
$                                           {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                            {"Reference": [{"Name": "numberLocations"},
$                                                                                           null]}]}]},
$                                           {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}]}],
$                      [{"Name": "costs"},
$                       {"DomainFunction": [[], [{"SizeAttr_None": []}, "PartialityAttr_Total", "JectivityAttr_None"],
$                                           {"DomainTuple": [{"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                                             {"Reference": [{"Name": "numberLocations"},
$                                                                                                            null]}]}]},
$                                                            {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                                             {"Reference": [{"Name": "numberLocations"},
$                                                                                                            null]}]}]}]},
$                                           {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 0}}}]}]}],
$                      [{"Name": "vehicleCapacity"},
$                       {"DomainInt": [{"RangeLowerBounded": {"Constant": {"ConstantInt": 1}}}]}],
$                      [{"Name": "plan"},
$                       {"DomainSet": [[],
$                                      {"SizeAttr_MinMaxSize": [{"Reference": [{"Name": "minVehicles"}, null]},
$                                                               {"Reference": [{"Name": "numberLocations"}, null]}]},
$                                      {"DomainSequence": [[],
$                                                          [{"SizeAttr_MinMaxSize": [{"Constant": {"ConstantInt": 1}},
$                                                                                    {"Reference": [{"Name": "numberLocations"},
$                                                                                                   null]}]},
$                                                           "JectivityAttr_Injective"],
$                                                          {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 1}},
$                                                                                           {"Reference": [{"Name": "numberLocations"},
$                                                                                                          null]}]}]}]}]}]],
$  "questionAnswered": []}
